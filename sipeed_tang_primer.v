// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_primer.v
// Device     : EG4S20BG256
// LiteX sha1 : d3ea9123
// Date       : 2024-03-25 12:00:20
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------
module sipeed_tang_primer (
    input  wire          clk50M,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          sys_rstn,
    output wire          user_led0,
    output wire          user_led1,
    input  wire          jtag_tms,
  	input  wire          jtag_tdi,
  	output wire          jtag_tdo,
  	input  wire          jtag_tck,
    output wire          user_led3,
    output wire          user_led2
);

assign user_led3 = sys_rstn;

//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
└─── bus (SoCBusHandler)
│    └─── axilite2axi_0* (AXILite2AXI)
│    └─── axi2axilite_0* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2axilite_1* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── axi2axilite_2* (AXI2AXILite)
│    │    └─── buffer_0* (Buffer)
│    │    │    └─── pipe_valid (PipeValid)
│    │    │    └─── pipeline (Pipeline)
│    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    └─── fsm (FSM)
│    └─── _interconnect (AXIInterconnectShared)
│    │    └─── arbiter (AXIArbiter)
│    │    │    └─── rr_write (RoundRobin)
│    │    │    └─── rr_read (RoundRobin)
│    │    │    └─── wr_lock (_AXIRequestCounter)
│    │    │    └─── rd_lock (_AXIRequestCounter)
│    │    └─── decoder (AXIDecoder)
│    │    │    └─── _axirequestcounter_0* (_AXIRequestCounter)
│    │    │    └─── _axirequestcounter_1* (_AXIRequestCounter)
│    │    └─── timeout (AXITimeout)
│    │    │    └─── waittimer_0* (WaitTimer)
│    │    │    └─── waittimer_1* (WaitTimer)
│    │    │    └─── wr_fsm (FSM)
│    │    │    └─── rd_fsm (FSM)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (NaxRiscv)
│    └─── soc_bus (SoCBusHandler)
│    │    └─── axilite2axi_0* (AXILite2AXI)
│    │    └─── axi2axilite_0* (AXI2AXILite)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    │    └─── fsm (FSM)
│    │    └─── axi2axilite_1* (AXI2AXILite)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    │    └─── fsm (FSM)
│    │    └─── axi2axilite_2* (AXI2AXILite)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── axiburst2beat_0* (AXIBurst2Beat)
│    │    │    └─── fsm (FSM)
│    │    └─── _interconnect (AXIInterconnectShared)
│    │    │    └─── arbiter (AXIArbiter)
│    │    │    │    └─── rr_write (RoundRobin)
│    │    │    │    └─── rr_read (RoundRobin)
│    │    │    │    └─── wr_lock (_AXIRequestCounter)
│    │    │    │    └─── rd_lock (_AXIRequestCounter)
│    │    │    └─── decoder (AXIDecoder)
│    │    │    │    └─── _axirequestcounter_0* (_AXIRequestCounter)
│    │    │    │    └─── _axirequestcounter_1* (_AXIRequestCounter)
│    │    │    └─── timeout (AXITimeout)
│    │    │    │    └─── waittimer_0* (WaitTimer)
│    │    │    │    └─── waittimer_1* (WaitTimer)
│    │    │    │    └─── wr_fsm (FSM)
│    │    │    │    └─── rd_fsm (FSM)
│    └─── [NaxRiscvLitex_f14ec82dfe550be1404f5a47637708ca]
└─── rom (AXILiteSRAM)
│    └─── fsm (FSM)
└─── sram (AXILiteSRAM)
│    └─── fsm (FSM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (AXILite2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── sram_1* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── sram_2* (SRAM)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [AL_MAP_SEQ]
└─── [AL_MAP_SEQ]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          ar_first;
wire          ar_last;
wire          ar_param_dest;
wire          ar_param_id;
wire          ar_param_user;
wire   [31:0] ar_payload_addr;
wire    [1:0] ar_payload_burst;
wire    [3:0] ar_payload_cache;
wire    [7:0] ar_payload_len;
wire          ar_payload_lock;
wire    [2:0] ar_payload_prot;
wire    [3:0] ar_payload_qos;
wire    [3:0] ar_payload_region;
wire    [2:0] ar_payload_size;
reg           ar_ready = 1'd0;
wire          ar_valid;
reg           array_muxed0 = 1'd0;
reg           array_muxed1 = 1'd0;
reg     [3:0] array_muxed10 = 4'd0;
reg     [3:0] array_muxed11 = 4'd0;
reg           array_muxed12 = 1'd0;
reg           array_muxed13 = 1'd0;
reg           array_muxed14 = 1'd0;
reg           array_muxed15 = 1'd0;
reg           array_muxed16 = 1'd0;
reg           array_muxed17 = 1'd0;
reg    [31:0] array_muxed18 = 32'd0;
reg     [3:0] array_muxed19 = 4'd0;
reg           array_muxed2 = 1'd0;
reg           array_muxed20 = 1'd0;
reg           array_muxed21 = 1'd0;
reg           array_muxed22 = 1'd0;
reg           array_muxed23 = 1'd0;
reg           array_muxed24 = 1'd0;
reg           array_muxed25 = 1'd0;
reg           array_muxed26 = 1'd0;
reg    [31:0] array_muxed27 = 32'd0;
reg     [1:0] array_muxed28 = 2'd0;
reg     [7:0] array_muxed29 = 8'd0;
reg    [31:0] array_muxed3 = 32'd0;
reg     [2:0] array_muxed30 = 3'd0;
reg           array_muxed31 = 1'd0;
reg     [2:0] array_muxed32 = 3'd0;
reg     [3:0] array_muxed33 = 4'd0;
reg     [3:0] array_muxed34 = 4'd0;
reg     [3:0] array_muxed35 = 4'd0;
reg           array_muxed36 = 1'd0;
reg           array_muxed37 = 1'd0;
reg           array_muxed38 = 1'd0;
reg           array_muxed39 = 1'd0;
reg     [1:0] array_muxed4 = 2'd0;
reg     [7:0] array_muxed5 = 8'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg           array_muxed7 = 1'd0;
reg     [2:0] array_muxed8 = 3'd0;
reg     [3:0] array_muxed9 = 4'd0;
wire          aw_first;
wire          aw_last;
wire          aw_param_dest;
wire          aw_param_id;
wire          aw_param_user;
wire   [31:0] aw_payload_addr;
wire    [1:0] aw_payload_burst;
wire    [3:0] aw_payload_cache;
wire    [7:0] aw_payload_len;
wire          aw_payload_lock;
wire    [2:0] aw_payload_prot;
wire    [3:0] aw_payload_qos;
wire    [3:0] aw_payload_region;
wire    [2:0] aw_payload_size;
reg           aw_ready = 1'd0;
wire          aw_valid;
reg     [1:0] axi2axilite0_next_state = 2'd0;
reg     [1:0] axi2axilite0_state = 2'd0;
reg     [1:0] axi2axilite1_next_state = 2'd0;
reg     [1:0] axi2axilite1_state = 2'd0;
reg     [1:0] axi2axilite2_next_state = 2'd0;
reg     [1:0] axi2axilite2_state = 2'd0;
reg     [7:0] axirequestcounter0_counter = 8'd0;
wire          axirequestcounter0_empty;
wire          axirequestcounter0_full;
wire          axirequestcounter0_stall;
reg     [7:0] axirequestcounter1_counter = 8'd0;
wire          axirequestcounter1_empty;
wire          axirequestcounter1_full;
wire          axirequestcounter1_stall;
wire          b_first;
wire          b_last;
wire          b_param_dest;
wire          b_param_id;
wire          b_param_user;
reg     [1:0] b_payload_resp = 2'd0;
wire          b_ready;
reg           b_valid = 1'd0;
reg    [13:0] basesoc_adr = 14'd0;
reg    [31:0] basesoc_ar_payload_addr = 32'd0;
reg           basesoc_ar_ready = 1'd0;
reg           basesoc_ar_valid = 1'd0;
reg    [31:0] basesoc_aw_payload_addr = 32'd0;
reg           basesoc_aw_ready = 1'd0;
reg           basesoc_aw_valid = 1'd0;
reg     [1:0] basesoc_axilite2csr_next_state = 2'd0;
reg     [1:0] basesoc_axilite2csr_state = 2'd0;
reg    [31:0] basesoc_axiliteinterface_ar_payload_addr = 32'd0;
reg           basesoc_axiliteinterface_ar_ready = 1'd0;
reg           basesoc_axiliteinterface_ar_valid = 1'd0;
reg    [31:0] basesoc_axiliteinterface_aw_payload_addr = 32'd0;
reg           basesoc_axiliteinterface_aw_ready = 1'd0;
reg           basesoc_axiliteinterface_aw_valid = 1'd0;
reg     [1:0] basesoc_axiliteinterface_b_payload_resp = 2'd0;
wire          basesoc_axiliteinterface_b_ready;
reg           basesoc_axiliteinterface_b_valid = 1'd0;
reg    [31:0] basesoc_axiliteinterface_r_payload_data = 32'd0;
reg     [1:0] basesoc_axiliteinterface_r_payload_resp = 2'd0;
reg           basesoc_axiliteinterface_r_ready = 1'd0;
reg           basesoc_axiliteinterface_r_valid = 1'd0;
reg    [31:0] basesoc_axiliteinterface_w_payload_data = 32'd0;
reg     [3:0] basesoc_axiliteinterface_w_payload_strb = 4'd0;
reg           basesoc_axiliteinterface_w_ready = 1'd0;
reg           basesoc_axiliteinterface_w_valid = 1'd0;
reg     [1:0] basesoc_axilitesram0_next_state = 2'd0;
reg     [1:0] basesoc_axilitesram0_state = 2'd0;
reg     [1:0] basesoc_axilitesram1_next_state = 2'd0;
reg     [1:0] basesoc_axilitesram1_state = 2'd0;
reg     [1:0] basesoc_b_payload_resp = 2'd0;
wire          basesoc_b_ready;
reg           basesoc_b_valid = 1'd0;
reg    [14:0] basesoc_basesoc_adr = 15'd0;
wire   [31:0] basesoc_basesoc_dat_r;
reg           basesoc_basesoc_do_read = 1'd0;
reg           basesoc_basesoc_do_write = 1'd0;
reg           basesoc_basesoc_last_was_read = 1'd0;
reg           basesoc_basesoc_last_was_read_axilitesram0_next_value1 = 1'd0;
reg           basesoc_basesoc_last_was_read_axilitesram0_next_value_ce1 = 1'd0;
reg    [31:0] basesoc_basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value0 = 32'd0;
reg           basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0 = 1'd0;
reg    [31:0] basesoc_basesoc_ram_bus_ar_payload_addr = 32'd0;
reg           basesoc_basesoc_ram_bus_ar_ready = 1'd0;
reg           basesoc_basesoc_ram_bus_ar_valid = 1'd0;
reg    [31:0] basesoc_basesoc_ram_bus_aw_payload_addr = 32'd0;
reg           basesoc_basesoc_ram_bus_aw_ready = 1'd0;
reg           basesoc_basesoc_ram_bus_aw_valid = 1'd0;
reg     [1:0] basesoc_basesoc_ram_bus_b_payload_resp = 2'd0;
wire          basesoc_basesoc_ram_bus_b_ready;
reg           basesoc_basesoc_ram_bus_b_valid = 1'd0;
reg    [31:0] basesoc_basesoc_ram_bus_r_payload_data = 32'd0;
reg     [1:0] basesoc_basesoc_ram_bus_r_payload_resp = 2'd0;
reg           basesoc_basesoc_ram_bus_r_ready = 1'd0;
reg           basesoc_basesoc_ram_bus_r_valid = 1'd0;
reg    [31:0] basesoc_basesoc_ram_bus_w_payload_data = 32'd0;
reg     [3:0] basesoc_basesoc_ram_bus_w_payload_strb = 4'd0;
reg           basesoc_basesoc_ram_bus_w_ready = 1'd0;
reg           basesoc_basesoc_ram_bus_w_valid = 1'd0;
wire          basesoc_basesoc_socbushandler_ar_first;
wire          basesoc_basesoc_socbushandler_ar_last;
wire          basesoc_basesoc_socbushandler_ar_param_dest;
wire          basesoc_basesoc_socbushandler_ar_param_id;
wire          basesoc_basesoc_socbushandler_ar_param_user;
wire   [31:0] basesoc_basesoc_socbushandler_ar_payload_addr;
wire    [1:0] basesoc_basesoc_socbushandler_ar_payload_burst;
wire    [3:0] basesoc_basesoc_socbushandler_ar_payload_cache;
wire    [7:0] basesoc_basesoc_socbushandler_ar_payload_len;
wire          basesoc_basesoc_socbushandler_ar_payload_lock;
wire    [2:0] basesoc_basesoc_socbushandler_ar_payload_prot;
wire    [3:0] basesoc_basesoc_socbushandler_ar_payload_qos;
wire    [3:0] basesoc_basesoc_socbushandler_ar_payload_region;
wire    [2:0] basesoc_basesoc_socbushandler_ar_payload_size;
reg           basesoc_basesoc_socbushandler_ar_ready = 1'd0;
wire          basesoc_basesoc_socbushandler_ar_valid;
wire          basesoc_basesoc_socbushandler_aw_first;
wire          basesoc_basesoc_socbushandler_aw_last;
wire          basesoc_basesoc_socbushandler_aw_param_dest;
wire          basesoc_basesoc_socbushandler_aw_param_id;
wire          basesoc_basesoc_socbushandler_aw_param_user;
wire   [31:0] basesoc_basesoc_socbushandler_aw_payload_addr;
wire    [1:0] basesoc_basesoc_socbushandler_aw_payload_burst;
wire    [3:0] basesoc_basesoc_socbushandler_aw_payload_cache;
wire    [7:0] basesoc_basesoc_socbushandler_aw_payload_len;
wire          basesoc_basesoc_socbushandler_aw_payload_lock;
wire    [2:0] basesoc_basesoc_socbushandler_aw_payload_prot;
wire    [3:0] basesoc_basesoc_socbushandler_aw_payload_qos;
wire    [3:0] basesoc_basesoc_socbushandler_aw_payload_region;
wire    [2:0] basesoc_basesoc_socbushandler_aw_payload_size;
reg           basesoc_basesoc_socbushandler_aw_ready = 1'd0;
wire          basesoc_basesoc_socbushandler_aw_valid;
wire          basesoc_basesoc_socbushandler_ax_beat_first;
wire          basesoc_basesoc_socbushandler_ax_beat_last;
wire          basesoc_basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] basesoc_basesoc_socbushandler_ax_beat_payload_addr;
reg           basesoc_basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          basesoc_basesoc_socbushandler_ax_beat_valid;
reg           basesoc_basesoc_socbushandler_ax_burst_first = 1'd0;
reg           basesoc_basesoc_socbushandler_ax_burst_last = 1'd0;
reg           basesoc_basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           basesoc_basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           basesoc_basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] basesoc_basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] basesoc_basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] basesoc_basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] basesoc_basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           basesoc_basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] basesoc_basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] basesoc_basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] basesoc_basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] basesoc_basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          basesoc_basesoc_socbushandler_ax_burst_ready;
reg           basesoc_basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           basesoc_basesoc_socbushandler_b_first = 1'd0;
reg           basesoc_basesoc_socbushandler_b_last = 1'd0;
reg           basesoc_basesoc_socbushandler_b_param_dest = 1'd0;
reg           basesoc_basesoc_socbushandler_b_param_id = 1'd0;
reg           basesoc_basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] basesoc_basesoc_socbushandler_b_payload_resp = 2'd0;
wire          basesoc_basesoc_socbushandler_b_ready;
reg           basesoc_basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] basesoc_basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] basesoc_basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] basesoc_basesoc_socbushandler_beat_size;
wire   [11:0] basesoc_basesoc_socbushandler_beat_wrap;
reg           basesoc_basesoc_socbushandler_cmd_done = 1'd0;
reg           basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 = 1'd0;
reg           basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 = 1'd0;
reg           basesoc_basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 = 1'd0;
reg           basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 = 1'd0;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_first;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_last;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_param_id;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_ready;
wire          basesoc_basesoc_socbushandler_pipe_valid_sink_valid;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] basesoc_basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          basesoc_basesoc_socbushandler_pipe_valid_source_ready;
reg           basesoc_basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           basesoc_basesoc_socbushandler_r_first = 1'd0;
reg           basesoc_basesoc_socbushandler_r_last = 1'd0;
reg           basesoc_basesoc_socbushandler_r_param_dest = 1'd0;
reg           basesoc_basesoc_socbushandler_r_param_id = 1'd0;
reg           basesoc_basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] basesoc_basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] basesoc_basesoc_socbushandler_r_payload_resp = 2'd0;
wire          basesoc_basesoc_socbushandler_r_ready;
reg           basesoc_basesoc_socbushandler_r_valid = 1'd0;
wire          basesoc_basesoc_socbushandler_sink_sink_first;
wire          basesoc_basesoc_socbushandler_sink_sink_last;
wire          basesoc_basesoc_socbushandler_sink_sink_param_dest;
wire          basesoc_basesoc_socbushandler_sink_sink_param_id;
wire          basesoc_basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] basesoc_basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] basesoc_basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] basesoc_basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] basesoc_basesoc_socbushandler_sink_sink_payload_len;
wire          basesoc_basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] basesoc_basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] basesoc_basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] basesoc_basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] basesoc_basesoc_socbushandler_sink_sink_payload_size;
wire          basesoc_basesoc_socbushandler_sink_sink_ready;
wire          basesoc_basesoc_socbushandler_sink_sink_valid;
wire          basesoc_basesoc_socbushandler_source_source_first;
wire          basesoc_basesoc_socbushandler_source_source_last;
wire          basesoc_basesoc_socbushandler_source_source_param_dest;
wire          basesoc_basesoc_socbushandler_source_source_param_id;
wire          basesoc_basesoc_socbushandler_source_source_param_user;
wire   [31:0] basesoc_basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] basesoc_basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] basesoc_basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] basesoc_basesoc_socbushandler_source_source_payload_len;
wire          basesoc_basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] basesoc_basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] basesoc_basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] basesoc_basesoc_socbushandler_source_source_payload_region;
wire    [2:0] basesoc_basesoc_socbushandler_source_source_payload_size;
reg           basesoc_basesoc_socbushandler_source_source_ready = 1'd0;
wire          basesoc_basesoc_socbushandler_source_source_valid;
wire          basesoc_basesoc_socbushandler_w_first;
wire          basesoc_basesoc_socbushandler_w_last;
wire          basesoc_basesoc_socbushandler_w_param_dest;
wire          basesoc_basesoc_socbushandler_w_param_id;
wire          basesoc_basesoc_socbushandler_w_param_user;
wire   [31:0] basesoc_basesoc_socbushandler_w_payload_data;
wire    [3:0] basesoc_basesoc_socbushandler_w_payload_strb;
reg           basesoc_basesoc_socbushandler_w_ready = 1'd0;
wire          basesoc_basesoc_socbushandler_w_valid;
wire          basesoc_bus_error;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_cpu_rst;
wire   [31:0] basesoc_dat_r;
wire   [31:0] basesoc_dat_w;
wire          basesoc_debug_ndmreset/*synthesis keep*/;
reg           basesoc_debug_ndmreset_last = 1'd0;
wire          basesoc_debug_ndmreset_rise/*synthesis keep*/;
reg           basesoc_debug_reset = 1'd1;
reg           basesoc_do_read = 1'd0;
reg           basesoc_do_write = 1'd0;
//reg           basesoc_jtag_tck = 1'd0;
//reg           basesoc_jtag_tdi = 1'd0;
//wire          basesoc_jtag_tdo;
//reg           basesoc_jtag_tms = 1'd0;
reg           basesoc_last_was_read = 1'd0;
reg           basesoc_last_was_read_axilite2csr_next_value1 = 1'd0;
reg           basesoc_last_was_read_axilite2csr_next_value_ce1 = 1'd0;
reg           basesoc_master_ar_first = 1'd0;
reg           basesoc_master_ar_last = 1'd0;
reg           basesoc_master_ar_param_dest = 1'd0;
wire          basesoc_master_ar_param_id;
reg           basesoc_master_ar_param_user = 1'd0;
wire   [31:0] basesoc_master_ar_payload_addr;
wire    [1:0] basesoc_master_ar_payload_burst;
wire    [3:0] basesoc_master_ar_payload_cache;
wire    [7:0] basesoc_master_ar_payload_len;
wire          basesoc_master_ar_payload_lock;
wire    [2:0] basesoc_master_ar_payload_prot;
wire    [3:0] basesoc_master_ar_payload_qos;
reg     [3:0] basesoc_master_ar_payload_region = 4'd0;
wire    [2:0] basesoc_master_ar_payload_size;
reg           basesoc_master_ar_ready = 1'd0;
wire          basesoc_master_ar_valid;
reg           basesoc_master_aw_first = 1'd0;
reg           basesoc_master_aw_last = 1'd0;
reg           basesoc_master_aw_param_dest = 1'd0;
wire          basesoc_master_aw_param_id;
reg           basesoc_master_aw_param_user = 1'd0;
wire   [31:0] basesoc_master_aw_payload_addr;
wire    [1:0] basesoc_master_aw_payload_burst;
wire    [3:0] basesoc_master_aw_payload_cache;
wire    [7:0] basesoc_master_aw_payload_len;
wire          basesoc_master_aw_payload_lock;
wire    [2:0] basesoc_master_aw_payload_prot;
wire    [3:0] basesoc_master_aw_payload_qos;
reg     [3:0] basesoc_master_aw_payload_region = 4'd0;
wire    [2:0] basesoc_master_aw_payload_size;
reg           basesoc_master_aw_ready = 1'd0;
wire          basesoc_master_aw_valid;
wire          basesoc_master_b_first;
wire          basesoc_master_b_last;
wire          basesoc_master_b_param_dest;
wire          basesoc_master_b_param_id;
wire          basesoc_master_b_param_user;
wire    [1:0] basesoc_master_b_payload_resp;
wire          basesoc_master_b_ready;
reg           basesoc_master_b_valid = 1'd0;
wire          basesoc_master_r_first;
wire          basesoc_master_r_last;
wire          basesoc_master_r_param_dest;
wire          basesoc_master_r_param_id;
wire          basesoc_master_r_param_user;
wire   [31:0] basesoc_master_r_payload_data;
wire    [1:0] basesoc_master_r_payload_resp;
wire          basesoc_master_r_ready;
reg           basesoc_master_r_valid = 1'd0;
reg           basesoc_master_w_first = 1'd0;
wire          basesoc_master_w_last;
reg           basesoc_master_w_param_dest = 1'd0;
reg           basesoc_master_w_param_id = 1'd0;
reg           basesoc_master_w_param_user = 1'd0;
wire   [31:0] basesoc_master_w_payload_data/*synthesis keep*/;
wire    [3:0] basesoc_master_w_payload_strb;
reg           basesoc_master_w_ready = 1'd0;
wire          basesoc_master_w_valid;
wire          basesoc_naxriscv0;
wire          basesoc_naxriscv1;
wire   [31:0] basesoc_naxriscv_ar_payload_addr;
wire          basesoc_naxriscv_ar_ready;
wire          basesoc_naxriscv_ar_valid;
wire   [31:0] basesoc_naxriscv_aw_payload_addr/*synthesis keep*/;
wire          basesoc_naxriscv_aw_ready;
wire          basesoc_naxriscv_aw_valid;
wire    [1:0] basesoc_naxriscv_b_payload_resp;
wire          basesoc_naxriscv_b_ready;
wire          basesoc_naxriscv_b_valid;
reg    [31:0] basesoc_naxriscv_interrupt = 32'd0;
wire   [31:0] basesoc_naxriscv_r_payload_data;
wire    [1:0] basesoc_naxriscv_r_payload_resp;
wire          basesoc_naxriscv_r_ready;
wire          basesoc_naxriscv_r_valid;
wire          basesoc_naxriscv_reset;
wire    [7:0] basesoc_naxriscv_tracer_payload;
wire          basesoc_naxriscv_tracer_valid;
wire   [31:0] basesoc_naxriscv_w_payload_data/*synthesis keep*/;
wire    [3:0] basesoc_naxriscv_w_payload_strb;
wire          basesoc_naxriscv_w_ready/*synthesis keep*/;
wire          basesoc_naxriscv_w_valid/*synthesis keep*/;
reg    [31:0] basesoc_port_dat_r_latched = 32'd0;
reg    [31:0] basesoc_port_dat_r_latched_axilite2csr_next_value0 = 32'd0;
reg           basesoc_port_dat_r_latched_axilite2csr_next_value_ce0 = 1'd0;
reg    [31:0] basesoc_r_payload_data = 32'd0;
reg     [1:0] basesoc_r_payload_resp = 2'd0;
reg           basesoc_r_ready = 1'd0;
reg           basesoc_r_valid = 1'd0;
reg    [13:0] basesoc_ram_adr = 14'd0;
wire   [31:0] basesoc_ram_dat_r;
reg    [31:0] basesoc_ram_dat_w = 32'd0;
reg           basesoc_ram_do_read = 1'd0;
reg           basesoc_ram_do_write = 1'd0;
reg           basesoc_ram_last_was_read = 1'd0;
reg           basesoc_ram_last_was_read_axilitesram1_next_value1 = 1'd0;
reg           basesoc_ram_last_was_read_axilitesram1_next_value_ce1 = 1'd0;
reg    [31:0] basesoc_ram_port_dat_r_latched = 32'd0;
reg    [31:0] basesoc_ram_port_dat_r_latched_axilitesram1_next_value0 = 32'd0;
reg           basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce0 = 1'd0;
reg     [3:0] basesoc_ram_we = 4'd0;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg           basesoc_rs232phyrx_next_state = 1'd0;
reg           basesoc_rs232phyrx_state = 1'd0;
reg           basesoc_rs232phytx_next_state = 1'd0;
reg           basesoc_rs232phytx_state = 1'd0;
reg     [3:0] basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_rx_phase = 32'd0;
wire          basesoc_rx_rx;
reg           basesoc_rx_rx_d = 1'd0;
reg           basesoc_rx_source_first = 1'd0;
reg           basesoc_rx_source_last = 1'd0;
reg     [7:0] basesoc_rx_source_payload_data = 8'd0;
wire          basesoc_rx_source_ready;
reg           basesoc_rx_source_valid = 1'd0;
reg           basesoc_rx_tick = 1'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
wire          basesoc_slave_ar_first;
wire          basesoc_slave_ar_last;
wire          basesoc_slave_ar_param_dest;
wire          basesoc_slave_ar_param_id;
wire          basesoc_slave_ar_param_user;
wire   [31:0] basesoc_slave_ar_payload_addr;
wire    [1:0] basesoc_slave_ar_payload_burst;
wire    [3:0] basesoc_slave_ar_payload_cache;
wire    [7:0] basesoc_slave_ar_payload_len;
wire          basesoc_slave_ar_payload_lock;
wire    [2:0] basesoc_slave_ar_payload_prot;
wire    [3:0] basesoc_slave_ar_payload_qos;
wire    [3:0] basesoc_slave_ar_payload_region;
wire    [2:0] basesoc_slave_ar_payload_size;
reg           basesoc_slave_ar_ready = 1'd0;
wire          basesoc_slave_ar_valid;
wire          basesoc_slave_aw_first;
wire          basesoc_slave_aw_last;
wire          basesoc_slave_aw_param_dest;
wire          basesoc_slave_aw_param_id;
wire          basesoc_slave_aw_param_user;
wire   [31:0] basesoc_slave_aw_payload_addr;
wire    [1:0] basesoc_slave_aw_payload_burst;
wire    [3:0] basesoc_slave_aw_payload_cache;
wire    [7:0] basesoc_slave_aw_payload_len;
wire          basesoc_slave_aw_payload_lock;
wire    [2:0] basesoc_slave_aw_payload_prot;
wire    [3:0] basesoc_slave_aw_payload_qos;
wire    [3:0] basesoc_slave_aw_payload_region;
wire    [2:0] basesoc_slave_aw_payload_size;
reg           basesoc_slave_aw_ready = 1'd0;
wire          basesoc_slave_aw_valid;
wire          basesoc_slave_ax_beat_first;
wire          basesoc_slave_ax_beat_last;
wire          basesoc_slave_ax_beat_param_id;
wire   [31:0] basesoc_slave_ax_beat_payload_addr;
reg           basesoc_slave_ax_beat_ready = 1'd0;
wire          basesoc_slave_ax_beat_valid;
reg           basesoc_slave_ax_burst_first = 1'd0;
reg           basesoc_slave_ax_burst_last = 1'd0;
reg           basesoc_slave_ax_burst_param_dest = 1'd0;
reg           basesoc_slave_ax_burst_param_id = 1'd0;
reg           basesoc_slave_ax_burst_param_user = 1'd0;
reg    [31:0] basesoc_slave_ax_burst_payload_addr = 32'd0;
reg     [1:0] basesoc_slave_ax_burst_payload_burst = 2'd0;
reg     [3:0] basesoc_slave_ax_burst_payload_cache = 4'd0;
reg     [7:0] basesoc_slave_ax_burst_payload_len = 8'd0;
reg           basesoc_slave_ax_burst_payload_lock = 1'd0;
reg     [2:0] basesoc_slave_ax_burst_payload_prot = 3'd0;
reg     [3:0] basesoc_slave_ax_burst_payload_qos = 4'd0;
reg     [3:0] basesoc_slave_ax_burst_payload_region = 4'd0;
reg     [2:0] basesoc_slave_ax_burst_payload_size = 3'd0;
wire          basesoc_slave_ax_burst_ready;
reg           basesoc_slave_ax_burst_valid = 1'd0;
reg           basesoc_slave_b_first = 1'd0;
reg           basesoc_slave_b_last = 1'd0;
reg           basesoc_slave_b_param_dest = 1'd0;
reg           basesoc_slave_b_param_id = 1'd0;
reg           basesoc_slave_b_param_user = 1'd0;
reg     [1:0] basesoc_slave_b_payload_resp = 2'd0;
wire          basesoc_slave_b_ready;
reg           basesoc_slave_b_valid = 1'd0;
reg     [7:0] basesoc_slave_beat_count = 8'd0;
reg  signed  [12:0] basesoc_slave_beat_offset = 13'd0;
wire   [11:0] basesoc_slave_beat_size;
wire   [11:0] basesoc_slave_beat_wrap;
reg           basesoc_slave_cmd_done = 1'd0;
reg           basesoc_slave_cmd_done_axi2axilite1_next_value0 = 1'd0;
reg           basesoc_slave_cmd_done_axi2axilite1_next_value_ce0 = 1'd0;
reg           basesoc_slave_last_ar_aw_n = 1'd0;
reg           basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1 = 1'd0;
reg           basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1 = 1'd0;
wire          basesoc_slave_pipe_valid_sink_first;
wire          basesoc_slave_pipe_valid_sink_last;
wire          basesoc_slave_pipe_valid_sink_param_dest;
wire          basesoc_slave_pipe_valid_sink_param_id;
wire          basesoc_slave_pipe_valid_sink_param_user;
wire   [31:0] basesoc_slave_pipe_valid_sink_payload_addr;
wire    [1:0] basesoc_slave_pipe_valid_sink_payload_burst;
wire    [3:0] basesoc_slave_pipe_valid_sink_payload_cache;
wire    [7:0] basesoc_slave_pipe_valid_sink_payload_len;
wire          basesoc_slave_pipe_valid_sink_payload_lock;
wire    [2:0] basesoc_slave_pipe_valid_sink_payload_prot;
wire    [3:0] basesoc_slave_pipe_valid_sink_payload_qos;
wire    [3:0] basesoc_slave_pipe_valid_sink_payload_region;
wire    [2:0] basesoc_slave_pipe_valid_sink_payload_size;
wire          basesoc_slave_pipe_valid_sink_ready;
wire          basesoc_slave_pipe_valid_sink_valid;
reg           basesoc_slave_pipe_valid_source_first = 1'd0;
reg           basesoc_slave_pipe_valid_source_last = 1'd0;
reg           basesoc_slave_pipe_valid_source_param_dest = 1'd0;
reg           basesoc_slave_pipe_valid_source_param_id = 1'd0;
reg           basesoc_slave_pipe_valid_source_param_user = 1'd0;
reg    [31:0] basesoc_slave_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] basesoc_slave_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] basesoc_slave_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] basesoc_slave_pipe_valid_source_payload_len = 8'd0;
reg           basesoc_slave_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] basesoc_slave_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] basesoc_slave_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] basesoc_slave_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] basesoc_slave_pipe_valid_source_payload_size = 3'd0;
wire          basesoc_slave_pipe_valid_source_ready;
reg           basesoc_slave_pipe_valid_source_valid = 1'd0;
reg           basesoc_slave_r_first = 1'd0;
reg           basesoc_slave_r_last = 1'd0;
reg           basesoc_slave_r_param_dest = 1'd0;
reg           basesoc_slave_r_param_id = 1'd0;
reg           basesoc_slave_r_param_user = 1'd0;
reg    [31:0] basesoc_slave_r_payload_data = 32'd0;
reg     [1:0] basesoc_slave_r_payload_resp = 2'd0;
wire          basesoc_slave_r_ready;
reg           basesoc_slave_r_valid = 1'd0;
wire          basesoc_slave_sink_sink_first;
wire          basesoc_slave_sink_sink_last;
wire          basesoc_slave_sink_sink_param_dest;
wire          basesoc_slave_sink_sink_param_id;
wire          basesoc_slave_sink_sink_param_user;
wire   [31:0] basesoc_slave_sink_sink_payload_addr;
wire    [1:0] basesoc_slave_sink_sink_payload_burst;
wire    [3:0] basesoc_slave_sink_sink_payload_cache;
wire    [7:0] basesoc_slave_sink_sink_payload_len;
wire          basesoc_slave_sink_sink_payload_lock;
wire    [2:0] basesoc_slave_sink_sink_payload_prot;
wire    [3:0] basesoc_slave_sink_sink_payload_qos;
wire    [3:0] basesoc_slave_sink_sink_payload_region;
wire    [2:0] basesoc_slave_sink_sink_payload_size;
wire          basesoc_slave_sink_sink_ready;
wire          basesoc_slave_sink_sink_valid;
wire          basesoc_slave_source_source_first;
wire          basesoc_slave_source_source_last;
wire          basesoc_slave_source_source_param_dest;
wire          basesoc_slave_source_source_param_id;
wire          basesoc_slave_source_source_param_user;
wire   [31:0] basesoc_slave_source_source_payload_addr;
wire    [1:0] basesoc_slave_source_source_payload_burst;
wire    [3:0] basesoc_slave_source_source_payload_cache;
wire    [7:0] basesoc_slave_source_source_payload_len;
wire          basesoc_slave_source_source_payload_lock;
wire    [2:0] basesoc_slave_source_source_payload_prot;
wire    [3:0] basesoc_slave_source_source_payload_qos;
wire    [3:0] basesoc_slave_source_source_payload_region;
wire    [2:0] basesoc_slave_source_source_payload_size;
reg           basesoc_slave_source_source_ready = 1'd0;
wire          basesoc_slave_source_source_valid;
wire          basesoc_slave_w_first;
wire          basesoc_slave_w_last;
wire          basesoc_slave_w_param_dest;
wire          basesoc_slave_w_param_id;
wire          basesoc_slave_w_param_user;
wire   [31:0] basesoc_slave_w_payload_data;
wire    [3:0] basesoc_slave_w_payload_strb;
reg           basesoc_slave_w_ready = 1'd0;
wire          basesoc_slave_w_valid;
reg           basesoc_soc_rst = 1'd0;
wire          basesoc_socbushandler_ar_first;
wire          basesoc_socbushandler_ar_last;
wire          basesoc_socbushandler_ar_param_dest;
wire          basesoc_socbushandler_ar_param_id;
wire          basesoc_socbushandler_ar_param_user;
wire   [31:0] basesoc_socbushandler_ar_payload_addr;
wire    [1:0] basesoc_socbushandler_ar_payload_burst;
wire    [3:0] basesoc_socbushandler_ar_payload_cache;
wire    [7:0] basesoc_socbushandler_ar_payload_len;
wire          basesoc_socbushandler_ar_payload_lock;
wire    [2:0] basesoc_socbushandler_ar_payload_prot;
wire    [3:0] basesoc_socbushandler_ar_payload_qos;
wire    [3:0] basesoc_socbushandler_ar_payload_region;
wire    [2:0] basesoc_socbushandler_ar_payload_size;
reg           basesoc_socbushandler_ar_ready = 1'd0;
wire          basesoc_socbushandler_ar_valid;
wire          basesoc_socbushandler_aw_first;
wire          basesoc_socbushandler_aw_last;
wire          basesoc_socbushandler_aw_param_dest;
wire          basesoc_socbushandler_aw_param_id;
wire          basesoc_socbushandler_aw_param_user;
wire   [31:0] basesoc_socbushandler_aw_payload_addr;
wire    [1:0] basesoc_socbushandler_aw_payload_burst;
wire    [3:0] basesoc_socbushandler_aw_payload_cache;
wire    [7:0] basesoc_socbushandler_aw_payload_len;
wire          basesoc_socbushandler_aw_payload_lock;
wire    [2:0] basesoc_socbushandler_aw_payload_prot;
wire    [3:0] basesoc_socbushandler_aw_payload_qos;
wire    [3:0] basesoc_socbushandler_aw_payload_region;
wire    [2:0] basesoc_socbushandler_aw_payload_size;
reg           basesoc_socbushandler_aw_ready = 1'd0;
wire          basesoc_socbushandler_aw_valid;
wire          basesoc_socbushandler_ax_beat_first;
wire          basesoc_socbushandler_ax_beat_last;
wire          basesoc_socbushandler_ax_beat_param_id;
wire   [31:0] basesoc_socbushandler_ax_beat_payload_addr;
reg           basesoc_socbushandler_ax_beat_ready = 1'd0;
wire          basesoc_socbushandler_ax_beat_valid;
reg           basesoc_socbushandler_ax_burst_first = 1'd0;
reg           basesoc_socbushandler_ax_burst_last = 1'd0;
reg           basesoc_socbushandler_ax_burst_param_dest = 1'd0;
reg           basesoc_socbushandler_ax_burst_param_id = 1'd0;
reg           basesoc_socbushandler_ax_burst_param_user = 1'd0;
reg    [31:0] basesoc_socbushandler_ax_burst_payload_addr = 32'd0;
reg     [1:0] basesoc_socbushandler_ax_burst_payload_burst = 2'd0;
reg     [3:0] basesoc_socbushandler_ax_burst_payload_cache = 4'd0;
reg     [7:0] basesoc_socbushandler_ax_burst_payload_len = 8'd0;
reg           basesoc_socbushandler_ax_burst_payload_lock = 1'd0;
reg     [2:0] basesoc_socbushandler_ax_burst_payload_prot = 3'd0;
reg     [3:0] basesoc_socbushandler_ax_burst_payload_qos = 4'd0;
reg     [3:0] basesoc_socbushandler_ax_burst_payload_region = 4'd0;
reg     [2:0] basesoc_socbushandler_ax_burst_payload_size = 3'd0;
wire          basesoc_socbushandler_ax_burst_ready;
reg           basesoc_socbushandler_ax_burst_valid = 1'd0;
reg           basesoc_socbushandler_b_first = 1'd0;
reg           basesoc_socbushandler_b_last = 1'd0;
reg           basesoc_socbushandler_b_param_dest = 1'd0;
reg           basesoc_socbushandler_b_param_id = 1'd0;
reg           basesoc_socbushandler_b_param_user = 1'd0;
reg     [1:0] basesoc_socbushandler_b_payload_resp = 2'd0;
wire          basesoc_socbushandler_b_ready;
reg           basesoc_socbushandler_b_valid = 1'd0;
reg     [7:0] basesoc_socbushandler_beat_count = 8'd0;
reg  signed  [12:0] basesoc_socbushandler_beat_offset = 13'd0;
wire   [11:0] basesoc_socbushandler_beat_size;
wire   [11:0] basesoc_socbushandler_beat_wrap;
reg           basesoc_socbushandler_cmd_done = 1'd0;
reg           basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 = 1'd0;
reg           basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 = 1'd0;
reg           basesoc_socbushandler_last_ar_aw_n = 1'd0;
reg           basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 = 1'd0;
reg           basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 = 1'd0;
wire          basesoc_socbushandler_pipe_valid_sink_first;
wire          basesoc_socbushandler_pipe_valid_sink_last;
wire          basesoc_socbushandler_pipe_valid_sink_param_dest;
wire          basesoc_socbushandler_pipe_valid_sink_param_id;
wire          basesoc_socbushandler_pipe_valid_sink_param_user;
wire   [31:0] basesoc_socbushandler_pipe_valid_sink_payload_addr;
wire    [1:0] basesoc_socbushandler_pipe_valid_sink_payload_burst;
wire    [3:0] basesoc_socbushandler_pipe_valid_sink_payload_cache;
wire    [7:0] basesoc_socbushandler_pipe_valid_sink_payload_len;
wire          basesoc_socbushandler_pipe_valid_sink_payload_lock;
wire    [2:0] basesoc_socbushandler_pipe_valid_sink_payload_prot;
wire    [3:0] basesoc_socbushandler_pipe_valid_sink_payload_qos;
wire    [3:0] basesoc_socbushandler_pipe_valid_sink_payload_region;
wire    [2:0] basesoc_socbushandler_pipe_valid_sink_payload_size;
wire          basesoc_socbushandler_pipe_valid_sink_ready;
wire          basesoc_socbushandler_pipe_valid_sink_valid;
reg           basesoc_socbushandler_pipe_valid_source_first = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_last = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_param_dest = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_param_id = 1'd0;
reg           basesoc_socbushandler_pipe_valid_source_param_user = 1'd0;
reg    [31:0] basesoc_socbushandler_pipe_valid_source_payload_addr = 32'd0;
reg     [1:0] basesoc_socbushandler_pipe_valid_source_payload_burst = 2'd0;
reg     [3:0] basesoc_socbushandler_pipe_valid_source_payload_cache = 4'd0;
reg     [7:0] basesoc_socbushandler_pipe_valid_source_payload_len = 8'd0;
reg           basesoc_socbushandler_pipe_valid_source_payload_lock = 1'd0;
reg     [2:0] basesoc_socbushandler_pipe_valid_source_payload_prot = 3'd0;
reg     [3:0] basesoc_socbushandler_pipe_valid_source_payload_qos = 4'd0;
reg     [3:0] basesoc_socbushandler_pipe_valid_source_payload_region = 4'd0;
reg     [2:0] basesoc_socbushandler_pipe_valid_source_payload_size = 3'd0;
wire          basesoc_socbushandler_pipe_valid_source_ready;
reg           basesoc_socbushandler_pipe_valid_source_valid = 1'd0;
reg           basesoc_socbushandler_r_first = 1'd0;
reg           basesoc_socbushandler_r_last = 1'd0;
reg           basesoc_socbushandler_r_param_dest = 1'd0;
reg           basesoc_socbushandler_r_param_id = 1'd0;
reg           basesoc_socbushandler_r_param_user = 1'd0;
reg    [31:0] basesoc_socbushandler_r_payload_data = 32'd0;
reg     [1:0] basesoc_socbushandler_r_payload_resp = 2'd0;
wire          basesoc_socbushandler_r_ready;
reg           basesoc_socbushandler_r_valid = 1'd0;
wire          basesoc_socbushandler_sink_sink_first;
wire          basesoc_socbushandler_sink_sink_last;
wire          basesoc_socbushandler_sink_sink_param_dest;
wire          basesoc_socbushandler_sink_sink_param_id;
wire          basesoc_socbushandler_sink_sink_param_user;
wire   [31:0] basesoc_socbushandler_sink_sink_payload_addr;
wire    [1:0] basesoc_socbushandler_sink_sink_payload_burst;
wire    [3:0] basesoc_socbushandler_sink_sink_payload_cache;
wire    [7:0] basesoc_socbushandler_sink_sink_payload_len;
wire          basesoc_socbushandler_sink_sink_payload_lock;
wire    [2:0] basesoc_socbushandler_sink_sink_payload_prot;
wire    [3:0] basesoc_socbushandler_sink_sink_payload_qos;
wire    [3:0] basesoc_socbushandler_sink_sink_payload_region;
wire    [2:0] basesoc_socbushandler_sink_sink_payload_size;
wire          basesoc_socbushandler_sink_sink_ready;
wire          basesoc_socbushandler_sink_sink_valid;
wire          basesoc_socbushandler_source_source_first;
wire          basesoc_socbushandler_source_source_last;
wire          basesoc_socbushandler_source_source_param_dest;
wire          basesoc_socbushandler_source_source_param_id;
wire          basesoc_socbushandler_source_source_param_user;
wire   [31:0] basesoc_socbushandler_source_source_payload_addr;
wire    [1:0] basesoc_socbushandler_source_source_payload_burst;
wire    [3:0] basesoc_socbushandler_source_source_payload_cache;
wire    [7:0] basesoc_socbushandler_source_source_payload_len;
wire          basesoc_socbushandler_source_source_payload_lock;
wire    [2:0] basesoc_socbushandler_source_source_payload_prot;
wire    [3:0] basesoc_socbushandler_source_source_payload_qos;
wire    [3:0] basesoc_socbushandler_source_source_payload_region;
wire    [2:0] basesoc_socbushandler_source_source_payload_size;
reg           basesoc_socbushandler_source_source_ready = 1'd0;
wire          basesoc_socbushandler_source_source_valid;
wire          basesoc_socbushandler_w_first;
wire          basesoc_socbushandler_w_last;
wire          basesoc_socbushandler_w_param_dest;
wire          basesoc_socbushandler_w_param_id;
wire          basesoc_socbushandler_w_param_user;
wire   [31:0] basesoc_socbushandler_w_payload_data;
wire    [3:0] basesoc_socbushandler_w_payload_strb;
reg           basesoc_socbushandler_w_ready = 1'd0;
wire          basesoc_socbushandler_w_valid;
reg           basesoc_timer_en_re = 1'd0;
reg           basesoc_timer_en_storage = 1'd0;
reg           basesoc_timer_enable_re = 1'd0;
reg           basesoc_timer_enable_storage = 1'd0;
wire          basesoc_timer_irq;
reg           basesoc_timer_load_re = 1'd0;
reg    [31:0] basesoc_timer_load_storage = 32'd0;
reg           basesoc_timer_pending_r = 1'd0;
reg           basesoc_timer_pending_re = 1'd0;
reg           basesoc_timer_pending_status = 1'd0;
wire          basesoc_timer_pending_we;
reg           basesoc_timer_reload_re = 1'd0;
reg    [31:0] basesoc_timer_reload_storage = 32'd0;
reg           basesoc_timer_status_re = 1'd0;
reg           basesoc_timer_status_status = 1'd0;
wire          basesoc_timer_status_we;
reg           basesoc_timer_update_value_re = 1'd0;
reg           basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] basesoc_timer_value = 32'd0;
reg           basesoc_timer_value_re = 1'd0;
reg    [31:0] basesoc_timer_value_status = 32'd0;
wire          basesoc_timer_value_we;
wire          basesoc_timer_zero0;
wire          basesoc_timer_zero1;
wire          basesoc_timer_zero2;
reg           basesoc_timer_zero_clear = 1'd0;
reg           basesoc_timer_zero_pending = 1'd0;
wire          basesoc_timer_zero_status;
wire          basesoc_timer_zero_trigger;
reg           basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_tx_enable = 1'd0;
reg    [31:0] basesoc_tx_phase = 32'd0;
wire          basesoc_tx_sink_first;
wire          basesoc_tx_sink_last;
wire    [7:0] basesoc_tx_sink_payload_data;
reg           basesoc_tx_sink_ready = 1'd0;
wire          basesoc_tx_sink_valid;
reg           basesoc_tx_tick = 1'd0;
reg           basesoc_uart_enable_re = 1'd0;
reg     [1:0] basesoc_uart_enable_storage = 2'd0;
wire          basesoc_uart_irq;
reg     [1:0] basesoc_uart_pending_r = 2'd0;
reg           basesoc_uart_pending_re = 1'd0;
reg     [1:0] basesoc_uart_pending_status = 2'd0;
wire          basesoc_uart_pending_we;
wire          basesoc_uart_rx0;
wire          basesoc_uart_rx1;
wire          basesoc_uart_rx2;
reg           basesoc_uart_rx_clear = 1'd0;
reg     [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
wire          basesoc_uart_rx_fifo_do_read;
wire          basesoc_uart_rx_fifo_fifo_in_first;
wire          basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          basesoc_uart_rx_fifo_fifo_out_first;
wire          basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_rx_fifo_level1;
reg     [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire          basesoc_uart_rx_fifo_rdport_re;
wire          basesoc_uart_rx_fifo_re;
reg           basesoc_uart_rx_fifo_readable = 1'd0;
reg           basesoc_uart_rx_fifo_replace = 1'd0;
wire          basesoc_uart_rx_fifo_sink_first;
wire          basesoc_uart_rx_fifo_sink_last;
wire    [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire          basesoc_uart_rx_fifo_sink_ready;
wire          basesoc_uart_rx_fifo_sink_valid;
wire          basesoc_uart_rx_fifo_source_first;
wire          basesoc_uart_rx_fifo_source_last;
wire    [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire          basesoc_uart_rx_fifo_source_ready;
wire          basesoc_uart_rx_fifo_source_valid;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
wire          basesoc_uart_rx_fifo_syncfifo_re;
wire          basesoc_uart_rx_fifo_syncfifo_readable;
wire          basesoc_uart_rx_fifo_syncfifo_we;
wire          basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire          basesoc_uart_rx_fifo_wrport_we;
reg           basesoc_uart_rx_pending = 1'd0;
wire          basesoc_uart_rx_status;
wire          basesoc_uart_rx_trigger;
reg           basesoc_uart_rx_trigger_d = 1'd0;
reg           basesoc_uart_rxempty_re = 1'd0;
wire          basesoc_uart_rxempty_status;
wire          basesoc_uart_rxempty_we;
reg           basesoc_uart_rxfull_re = 1'd0;
wire          basesoc_uart_rxfull_status;
wire          basesoc_uart_rxfull_we;
wire    [7:0] basesoc_uart_rxtx_r;
reg           basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] basesoc_uart_rxtx_w;
reg           basesoc_uart_rxtx_we = 1'd0;
reg           basesoc_uart_status_re = 1'd0;
reg     [1:0] basesoc_uart_status_status = 2'd0;
wire          basesoc_uart_status_we;
wire          basesoc_uart_tx0;
wire          basesoc_uart_tx1;
wire          basesoc_uart_tx2;
reg           basesoc_uart_tx_clear = 1'd0;
reg     [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
wire          basesoc_uart_tx_fifo_do_read;
wire          basesoc_uart_tx_fifo_fifo_in_first;
wire          basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          basesoc_uart_tx_fifo_fifo_out_first;
wire          basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_tx_fifo_level1;
reg     [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire          basesoc_uart_tx_fifo_rdport_re;
wire          basesoc_uart_tx_fifo_re;
reg           basesoc_uart_tx_fifo_readable = 1'd0;
reg           basesoc_uart_tx_fifo_replace = 1'd0;
reg           basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire          basesoc_uart_tx_fifo_sink_ready;
wire          basesoc_uart_tx_fifo_sink_valid;
wire          basesoc_uart_tx_fifo_source_first;
wire          basesoc_uart_tx_fifo_source_last;
wire    [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire          basesoc_uart_tx_fifo_source_ready;
wire          basesoc_uart_tx_fifo_source_valid;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
wire          basesoc_uart_tx_fifo_syncfifo_re;
wire          basesoc_uart_tx_fifo_syncfifo_readable;
wire          basesoc_uart_tx_fifo_syncfifo_we;
wire          basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire          basesoc_uart_tx_fifo_wrport_we;
reg           basesoc_uart_tx_pending = 1'd0;
wire          basesoc_uart_tx_status;
wire          basesoc_uart_tx_trigger;
reg           basesoc_uart_tx_trigger_d = 1'd0;
reg           basesoc_uart_txempty_re = 1'd0;
wire          basesoc_uart_txempty_status;
wire          basesoc_uart_txempty_we;
reg           basesoc_uart_txfull_re = 1'd0;
wire          basesoc_uart_txfull_status;
wire          basesoc_uart_txfull_we;
wire          basesoc_uart_uart_sink_first;
wire          basesoc_uart_uart_sink_last;
wire    [7:0] basesoc_uart_uart_sink_payload_data;
wire          basesoc_uart_uart_sink_ready;
wire          basesoc_uart_uart_sink_valid;
wire          basesoc_uart_uart_source_first;
wire          basesoc_uart_uart_source_last;
wire    [7:0] basesoc_uart_uart_source_payload_data;
wire          basesoc_uart_uart_source_ready;
wire          basesoc_uart_uart_source_valid;
reg    [31:0] basesoc_w_payload_data = 32'd0;
reg     [3:0] basesoc_w_payload_strb = 4'd0;
reg           basesoc_w_ready = 1'd0;
reg           basesoc_w_valid = 1'd0;
wire          basesoc_we/*synthesis keep*/;
reg     [2:0] chaser = 3'd0;
reg    [22:0] count = 23'd8333333;
reg           crg_rst0 = 1'd0/*synthesis keep*/;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w/*synthesis keep*/;
wire          csr_interconnect_we/*synthesis keep*/;
wire   [31:0] csrbank0_bus_errors_r;
reg           csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csrbank0_bus_errors_w;
reg           csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csrbank0_reset0_r;
reg           csrbank0_reset0_re = 1'd0;
wire    [1:0] csrbank0_reset0_w;
reg           csrbank0_reset0_we = 1'd0;
wire   [31:0] csrbank0_scratch0_r;
reg           csrbank0_scratch0_re = 1'd0;
wire   [31:0] csrbank0_scratch0_w;
reg           csrbank0_scratch0_we = 1'd0;
wire          csrbank0_sel;
wire    [2:0] csrbank1_out0_r/*synthesis keep*/;
reg           csrbank1_out0_re = 1'd0/*synthesis keep*/;
wire    [2:0] csrbank1_out0_w;
reg           csrbank1_out0_we = 1'd0;
wire          csrbank1_sel;
wire    [5:0] csrbank2_rom_page0_r;
reg           csrbank2_rom_page0_re = 1'd0;
wire    [5:0] csrbank2_rom_page0_w;
reg           csrbank2_rom_page0_we = 1'd0;
wire          csrbank2_sel;
wire          csrbank3_sel;
wire    [4:0] csrbank3_sram_page0_r;
reg           csrbank3_sram_page0_re = 1'd0;
wire    [4:0] csrbank3_sram_page0_w;
reg           csrbank3_sram_page0_we = 1'd0;
wire          csrbank4_en0_r;
reg           csrbank4_en0_re = 1'd0;
wire          csrbank4_en0_w;
reg           csrbank4_en0_we = 1'd0;
wire          csrbank4_ev_enable0_r;
reg           csrbank4_ev_enable0_re = 1'd0;
wire          csrbank4_ev_enable0_w;
reg           csrbank4_ev_enable0_we = 1'd0;
wire          csrbank4_ev_pending_r;
reg           csrbank4_ev_pending_re = 1'd0;
wire          csrbank4_ev_pending_w;
reg           csrbank4_ev_pending_we = 1'd0;
wire          csrbank4_ev_status_r;
reg           csrbank4_ev_status_re = 1'd0;
wire          csrbank4_ev_status_w;
reg           csrbank4_ev_status_we = 1'd0;
wire   [31:0] csrbank4_load0_r;
reg           csrbank4_load0_re = 1'd0;
wire   [31:0] csrbank4_load0_w;
reg           csrbank4_load0_we = 1'd0;
wire   [31:0] csrbank4_reload0_r;
reg           csrbank4_reload0_re = 1'd0;
wire   [31:0] csrbank4_reload0_w;
reg           csrbank4_reload0_we = 1'd0;
wire          csrbank4_sel;
wire          csrbank4_update_value0_r;
reg           csrbank4_update_value0_re = 1'd0;
wire          csrbank4_update_value0_w;
reg           csrbank4_update_value0_we = 1'd0;
wire   [31:0] csrbank4_value_r;
reg           csrbank4_value_re = 1'd0;
wire   [31:0] csrbank4_value_w;
reg           csrbank4_value_we = 1'd0;
wire    [1:0] csrbank5_ev_enable0_r;
reg           csrbank5_ev_enable0_re = 1'd0;
wire    [1:0] csrbank5_ev_enable0_w;
reg           csrbank5_ev_enable0_we = 1'd0;
wire    [1:0] csrbank5_ev_pending_r;
reg           csrbank5_ev_pending_re = 1'd0;
wire    [1:0] csrbank5_ev_pending_w;
reg           csrbank5_ev_pending_we = 1'd0;
wire    [1:0] csrbank5_ev_status_r;
reg           csrbank5_ev_status_re = 1'd0;
wire    [1:0] csrbank5_ev_status_w;
reg           csrbank5_ev_status_we = 1'd0;
wire          csrbank5_rxempty_r;
reg           csrbank5_rxempty_re = 1'd0;
wire          csrbank5_rxempty_w;
reg           csrbank5_rxempty_we = 1'd0;
wire          csrbank5_rxfull_r;
reg           csrbank5_rxfull_re = 1'd0;
wire          csrbank5_rxfull_w;
reg           csrbank5_rxfull_we = 1'd0;
wire          csrbank5_sel;
wire          csrbank5_txempty_r;
reg           csrbank5_txempty_re = 1'd0;
wire          csrbank5_txempty_w;
reg           csrbank5_txempty_we = 1'd0;
wire          csrbank5_txfull_r;
reg           csrbank5_txfull_re = 1'd0;
wire          csrbank5_txfull_w;
reg           csrbank5_txfull_we = 1'd0;
wire          debug_por_clk;
reg           debug_por_rst = 1'd0;
wire          done;
wire          error;
reg           fsm0_next_state = 1'd0;
reg           fsm0_state = 1'd0;
reg           fsm1_next_state = 1'd0;
reg           fsm1_state = 1'd0;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_we;
wire   [13:0] interface0_sram_bus_adr;
reg    [31:0] interface0_sram_bus_dat_r = 32'd0;
wire   [31:0] interface0_sram_bus_dat_w;
wire          interface0_sram_bus_we;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_we;
wire   [13:0] interface1_sram_bus_adr;
reg    [31:0] interface1_sram_bus_dat_r = 32'd0;
wire   [31:0] interface1_sram_bus_dat_w;
wire          interface1_sram_bus_we;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_we;
wire   [13:0] interface2_sram_bus_adr;
reg    [31:0] interface2_sram_bus_dat_r = 32'd0;
wire   [31:0] interface2_sram_bus_dat_w;
wire          interface2_sram_bus_we;
wire   [13:0] interface3_bank_bus_adr;
reg    [31:0] interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] interface3_bank_bus_dat_w;
wire          interface3_bank_bus_we;
wire   [13:0] interface4_bank_bus_adr;
reg    [31:0] interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] interface4_bank_bus_dat_w;
wire          interface4_bank_bus_we;
wire   [13:0] interface5_bank_bus_adr;
reg    [31:0] interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] interface5_bank_bus_dat_w;
wire          interface5_bank_bus_we;
reg     [2:0] leds = 3'd0/*synthesis keep*/;
reg           mode = 1'd0/*synthesis keep*/;
wire          r_first;
reg           r_last = 1'd0;
wire          r_param_dest;
wire          r_param_id;
wire          r_param_user;
reg    [31:0] r_payload_data = 32'd0;
reg     [1:0] r_payload_resp = 2'd0;
wire          r_ready;
reg           r_valid = 1'd0;
reg           rd_error = 1'd0;
reg     [7:0] rd_lock_counter = 8'd0;
wire          rd_lock_empty;
wire          rd_lock_full;
wire          rd_lock_stall;
reg    [19:0] rd_timer_count = 20'd1000000;
wire          rd_timer_done;
reg           rd_timer_wait = 1'd0;
reg           re = 1'd0;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;
wire          rr_read_ce;
wire          rr_read_grant;
wire          rr_read_request;
wire          rr_write_ce;
wire          rr_write_grant;
wire          rr_write_request;
wire          rst1;
reg     [2:0] slave_sel0 = 3'd0;
reg     [2:0] slave_sel1 = 3'd0;
reg     [2:0] slave_sel_dec0 = 3'd0;
reg     [2:0] slave_sel_dec1 = 3'd0;
reg     [2:0] slave_sel_reg0 = 3'd0;
reg     [2:0] slave_sel_reg1 = 3'd0;
wire   [29:0] slice_proxy0;
wire   [29:0] slice_proxy1;
wire   [29:0] slice_proxy2;
wire   [29:0] slice_proxy3;
wire   [29:0] slice_proxy4;
wire   [29:0] slice_proxy5;
wire    [5:0] sram0_adr;
wire    [7:0] sram0_dat_r;
wire          sram0_sel;
reg           sram0_sel_r = 1'd0;
wire   [14:0] sram1_adr;
wire   [31:0] sram1_dat_r;
wire   [31:0] sram1_dat_w;
reg           sram1_re = 1'd0;
wire          sram1_sel;
reg           sram1_sel_r = 1'd0;
reg     [5:0] sram1_storage = 6'd0;
wire          sram1_we;
wire   [13:0] sram2_adr;
wire   [31:0] sram2_dat_r;
wire   [31:0] sram2_dat_w;
reg           sram2_re = 1'd0;
wire          sram2_sel;
reg           sram2_sel_r = 1'd0;
reg     [4:0] sram2_storage = 5'd0;
wire          sram2_we;
reg     [2:0] storage = 3'd0/*synthesis keep*/;
wire          sys_clk;
wire          sys_rst;
wire          w_first;
wire          w_last;
wire          w_param_dest;
wire          w_param_id;
wire          w_param_user;
wire   [31:0] w_payload_data;
wire    [3:0] w_payload_strb;
reg           w_ready = 1'd0;
wire          w_valid;
wire          wait_1;
reg           wr_error = 1'd0;
reg     [7:0] wr_lock_counter = 8'd0;
wire          wr_lock_empty;
wire          wr_lock_full;
wire          wr_lock_stall;
reg    [19:0] wr_timer_count = 20'd1000000;
wire          wr_timer_done;
reg           wr_timer_wait = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_naxriscv_reset = (basesoc_soc_rst | basesoc_cpu_rst);
assign basesoc_bus_error = error;
always @(*) begin
    basesoc_naxriscv_interrupt <= 32'd0;
    basesoc_naxriscv_interrupt[2] <= basesoc_timer_irq;
    basesoc_naxriscv_interrupt[1] <= basesoc_uart_irq;
end
assign sys_clk = clk50M;
assign basesoc_master_aw_valid = basesoc_naxriscv_aw_valid;
assign basesoc_naxriscv_aw_ready = basesoc_master_aw_ready;
assign basesoc_master_aw_payload_addr = basesoc_naxriscv_aw_payload_addr;
assign basesoc_master_aw_payload_burst = 1'd1;
assign basesoc_master_aw_payload_len = 1'd0;
assign basesoc_master_aw_payload_size = 2'd2;
assign basesoc_master_aw_payload_lock = 1'd0;
assign basesoc_master_aw_payload_prot = 1'd0;
assign basesoc_master_aw_payload_cache = 2'd3;
assign basesoc_master_aw_payload_qos = 1'd0;
assign basesoc_master_aw_param_id = 1'd0;
assign basesoc_master_w_valid = basesoc_naxriscv_w_valid;
assign basesoc_naxriscv_w_ready = basesoc_master_w_ready;
assign basesoc_master_w_payload_data = basesoc_naxriscv_w_payload_data;
assign basesoc_master_w_payload_strb = basesoc_naxriscv_w_payload_strb;
assign basesoc_master_w_last = 1'd1;
assign basesoc_naxriscv_b_valid = basesoc_master_b_valid;
assign basesoc_naxriscv_b_payload_resp = basesoc_master_b_payload_resp;
assign basesoc_master_b_ready = basesoc_naxriscv_b_ready;
assign basesoc_master_ar_valid = basesoc_naxriscv_ar_valid;
assign basesoc_naxriscv_ar_ready = basesoc_master_ar_ready;
assign basesoc_master_ar_payload_addr = basesoc_naxriscv_ar_payload_addr;
assign basesoc_master_ar_payload_burst = 1'd1;
assign basesoc_master_ar_payload_len = 1'd0;
assign basesoc_master_ar_payload_size = 2'd2;
assign basesoc_master_ar_payload_lock = 1'd0;
assign basesoc_master_ar_payload_prot = 1'd0;
assign basesoc_master_ar_payload_cache = 2'd3;
assign basesoc_master_ar_payload_qos = 1'd0;
assign basesoc_master_ar_param_id = 1'd0;
assign basesoc_naxriscv_r_valid = basesoc_master_r_valid;
assign basesoc_naxriscv_r_payload_resp = basesoc_master_r_payload_resp;
assign basesoc_naxriscv_r_payload_data = basesoc_master_r_payload_data;
assign basesoc_master_r_ready = basesoc_naxriscv_r_ready;
assign basesoc_basesoc_socbushandler_sink_sink_valid = basesoc_basesoc_socbushandler_ax_burst_valid;
assign basesoc_basesoc_socbushandler_ax_burst_ready = basesoc_basesoc_socbushandler_sink_sink_ready;
assign basesoc_basesoc_socbushandler_sink_sink_first = basesoc_basesoc_socbushandler_ax_burst_first;
assign basesoc_basesoc_socbushandler_sink_sink_last = basesoc_basesoc_socbushandler_ax_burst_last;
assign basesoc_basesoc_socbushandler_sink_sink_payload_addr = basesoc_basesoc_socbushandler_ax_burst_payload_addr;
assign basesoc_basesoc_socbushandler_sink_sink_payload_burst = basesoc_basesoc_socbushandler_ax_burst_payload_burst;
assign basesoc_basesoc_socbushandler_sink_sink_payload_len = basesoc_basesoc_socbushandler_ax_burst_payload_len;
assign basesoc_basesoc_socbushandler_sink_sink_payload_size = basesoc_basesoc_socbushandler_ax_burst_payload_size;
assign basesoc_basesoc_socbushandler_sink_sink_payload_lock = basesoc_basesoc_socbushandler_ax_burst_payload_lock;
assign basesoc_basesoc_socbushandler_sink_sink_payload_prot = basesoc_basesoc_socbushandler_ax_burst_payload_prot;
assign basesoc_basesoc_socbushandler_sink_sink_payload_cache = basesoc_basesoc_socbushandler_ax_burst_payload_cache;
assign basesoc_basesoc_socbushandler_sink_sink_payload_qos = basesoc_basesoc_socbushandler_ax_burst_payload_qos;
assign basesoc_basesoc_socbushandler_sink_sink_payload_region = basesoc_basesoc_socbushandler_ax_burst_payload_region;
assign basesoc_basesoc_socbushandler_sink_sink_param_id = basesoc_basesoc_socbushandler_ax_burst_param_id;
assign basesoc_basesoc_socbushandler_sink_sink_param_dest = basesoc_basesoc_socbushandler_ax_burst_param_dest;
assign basesoc_basesoc_socbushandler_sink_sink_param_user = basesoc_basesoc_socbushandler_ax_burst_param_user;
assign basesoc_basesoc_ram_bus_b_ready = 1'd1;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_ready = ((~basesoc_basesoc_socbushandler_pipe_valid_source_valid) | basesoc_basesoc_socbushandler_pipe_valid_source_ready);
assign basesoc_basesoc_socbushandler_pipe_valid_sink_valid = basesoc_basesoc_socbushandler_sink_sink_valid;
assign basesoc_basesoc_socbushandler_sink_sink_ready = basesoc_basesoc_socbushandler_pipe_valid_sink_ready;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_first = basesoc_basesoc_socbushandler_sink_sink_first;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_last = basesoc_basesoc_socbushandler_sink_sink_last;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr = basesoc_basesoc_socbushandler_sink_sink_payload_addr;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst = basesoc_basesoc_socbushandler_sink_sink_payload_burst;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len = basesoc_basesoc_socbushandler_sink_sink_payload_len;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size = basesoc_basesoc_socbushandler_sink_sink_payload_size;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock = basesoc_basesoc_socbushandler_sink_sink_payload_lock;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot = basesoc_basesoc_socbushandler_sink_sink_payload_prot;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache = basesoc_basesoc_socbushandler_sink_sink_payload_cache;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos = basesoc_basesoc_socbushandler_sink_sink_payload_qos;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region = basesoc_basesoc_socbushandler_sink_sink_payload_region;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_param_id = basesoc_basesoc_socbushandler_sink_sink_param_id;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest = basesoc_basesoc_socbushandler_sink_sink_param_dest;
assign basesoc_basesoc_socbushandler_pipe_valid_sink_param_user = basesoc_basesoc_socbushandler_sink_sink_param_user;
assign basesoc_basesoc_socbushandler_source_source_valid = basesoc_basesoc_socbushandler_pipe_valid_source_valid;
assign basesoc_basesoc_socbushandler_pipe_valid_source_ready = basesoc_basesoc_socbushandler_source_source_ready;
assign basesoc_basesoc_socbushandler_source_source_first = basesoc_basesoc_socbushandler_pipe_valid_source_first;
assign basesoc_basesoc_socbushandler_source_source_last = basesoc_basesoc_socbushandler_pipe_valid_source_last;
assign basesoc_basesoc_socbushandler_source_source_payload_addr = basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr;
assign basesoc_basesoc_socbushandler_source_source_payload_burst = basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst;
assign basesoc_basesoc_socbushandler_source_source_payload_len = basesoc_basesoc_socbushandler_pipe_valid_source_payload_len;
assign basesoc_basesoc_socbushandler_source_source_payload_size = basesoc_basesoc_socbushandler_pipe_valid_source_payload_size;
assign basesoc_basesoc_socbushandler_source_source_payload_lock = basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock;
assign basesoc_basesoc_socbushandler_source_source_payload_prot = basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot;
assign basesoc_basesoc_socbushandler_source_source_payload_cache = basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache;
assign basesoc_basesoc_socbushandler_source_source_payload_qos = basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos;
assign basesoc_basesoc_socbushandler_source_source_payload_region = basesoc_basesoc_socbushandler_pipe_valid_source_payload_region;
assign basesoc_basesoc_socbushandler_source_source_param_id = basesoc_basesoc_socbushandler_pipe_valid_source_param_id;
assign basesoc_basesoc_socbushandler_source_source_param_dest = basesoc_basesoc_socbushandler_pipe_valid_source_param_dest;
assign basesoc_basesoc_socbushandler_source_source_param_user = basesoc_basesoc_socbushandler_pipe_valid_source_param_user;
assign basesoc_basesoc_socbushandler_beat_size = (1'd1 <<< basesoc_basesoc_socbushandler_source_source_payload_size);
assign basesoc_basesoc_socbushandler_beat_wrap = (basesoc_basesoc_socbushandler_source_source_payload_len <<< basesoc_basesoc_socbushandler_source_source_payload_size);
assign basesoc_basesoc_socbushandler_ax_beat_valid = (basesoc_basesoc_socbushandler_source_source_valid | (~basesoc_basesoc_socbushandler_ax_beat_first));
assign basesoc_basesoc_socbushandler_ax_beat_first = (basesoc_basesoc_socbushandler_beat_count == 1'd0);
assign basesoc_basesoc_socbushandler_ax_beat_last = (basesoc_basesoc_socbushandler_beat_count == basesoc_basesoc_socbushandler_source_source_payload_len);
assign basesoc_basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, basesoc_basesoc_socbushandler_source_source_payload_addr}) + basesoc_basesoc_socbushandler_beat_offset);
assign basesoc_basesoc_socbushandler_ax_beat_param_id = basesoc_basesoc_socbushandler_source_source_param_id;
always @(*) begin
    basesoc_basesoc_socbushandler_source_source_ready <= 1'd0;
    if (basesoc_basesoc_socbushandler_ax_beat_ready) begin
        if (basesoc_basesoc_socbushandler_ax_beat_last) begin
            basesoc_basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    axi2axilite0_next_state <= 2'd0;
    basesoc_basesoc_ram_bus_ar_payload_addr <= 32'd0;
    basesoc_basesoc_ram_bus_ar_valid <= 1'd0;
    basesoc_basesoc_ram_bus_aw_payload_addr <= 32'd0;
    basesoc_basesoc_ram_bus_aw_valid <= 1'd0;
    basesoc_basesoc_ram_bus_r_ready <= 1'd0;
    basesoc_basesoc_ram_bus_w_payload_data <= 32'd0;
    basesoc_basesoc_ram_bus_w_payload_strb <= 4'd0;
    basesoc_basesoc_ram_bus_w_valid <= 1'd0;
    basesoc_basesoc_socbushandler_ar_ready <= 1'd0;
    basesoc_basesoc_socbushandler_aw_ready <= 1'd0;
    basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_first <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_last <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    basesoc_basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    basesoc_basesoc_socbushandler_ax_burst_valid <= 1'd0;
    basesoc_basesoc_socbushandler_b_param_id <= 1'd0;
    basesoc_basesoc_socbushandler_b_payload_resp <= 2'd0;
    basesoc_basesoc_socbushandler_b_valid <= 1'd0;
    basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
    basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd0;
    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd0;
    basesoc_basesoc_socbushandler_r_last <= 1'd0;
    basesoc_basesoc_socbushandler_r_param_id <= 1'd0;
    basesoc_basesoc_socbushandler_r_payload_data <= 32'd0;
    basesoc_basesoc_socbushandler_r_payload_resp <= 2'd0;
    basesoc_basesoc_socbushandler_r_valid <= 1'd0;
    basesoc_basesoc_socbushandler_w_ready <= 1'd0;
    axi2axilite0_next_state <= axi2axilite0_state;
    case (axi2axilite0_state)
        1'd1: begin
            basesoc_basesoc_ram_bus_ar_valid <= (basesoc_basesoc_socbushandler_ax_beat_valid & (~basesoc_basesoc_socbushandler_cmd_done));
            basesoc_basesoc_ram_bus_ar_payload_addr <= basesoc_basesoc_socbushandler_ax_beat_payload_addr;
            basesoc_basesoc_socbushandler_ax_beat_ready <= (basesoc_basesoc_ram_bus_ar_ready & (~basesoc_basesoc_socbushandler_cmd_done));
            if ((basesoc_basesoc_socbushandler_ax_beat_valid & basesoc_basesoc_socbushandler_ax_beat_last)) begin
                if (basesoc_basesoc_ram_bus_ar_ready) begin
                    basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_basesoc_socbushandler_r_valid <= basesoc_basesoc_ram_bus_r_valid;
            basesoc_basesoc_socbushandler_r_last <= basesoc_basesoc_socbushandler_cmd_done;
            basesoc_basesoc_socbushandler_r_payload_resp <= 1'd0;
            basesoc_basesoc_socbushandler_r_param_id <= basesoc_basesoc_socbushandler_ax_beat_param_id;
            basesoc_basesoc_socbushandler_r_payload_data <= basesoc_basesoc_ram_bus_r_payload_data;
            basesoc_basesoc_ram_bus_r_ready <= basesoc_basesoc_socbushandler_r_ready;
            if (((basesoc_basesoc_socbushandler_r_valid & basesoc_basesoc_socbushandler_r_last) & basesoc_basesoc_socbushandler_r_ready)) begin
                basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                axi2axilite0_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_basesoc_ram_bus_aw_valid <= (basesoc_basesoc_socbushandler_ax_beat_valid & (~basesoc_basesoc_socbushandler_cmd_done));
            basesoc_basesoc_ram_bus_aw_payload_addr <= basesoc_basesoc_socbushandler_ax_beat_payload_addr;
            basesoc_basesoc_socbushandler_ax_beat_ready <= (basesoc_basesoc_ram_bus_aw_ready & (~basesoc_basesoc_socbushandler_cmd_done));
            if ((basesoc_basesoc_socbushandler_ax_beat_valid & basesoc_basesoc_socbushandler_ax_beat_last)) begin
                if (basesoc_basesoc_ram_bus_aw_ready) begin
                    basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd1;
                    basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_basesoc_ram_bus_w_valid <= basesoc_basesoc_socbushandler_w_valid;
            basesoc_basesoc_ram_bus_w_payload_data <= basesoc_basesoc_socbushandler_w_payload_data;
            basesoc_basesoc_ram_bus_w_payload_strb <= basesoc_basesoc_socbushandler_w_payload_strb;
            basesoc_basesoc_socbushandler_w_ready <= basesoc_basesoc_ram_bus_w_ready;
            if (((basesoc_basesoc_socbushandler_w_valid & basesoc_basesoc_socbushandler_w_last) & basesoc_basesoc_socbushandler_w_ready)) begin
                axi2axilite0_next_state <= 2'd3;
            end
        end
        2'd3: begin
            basesoc_basesoc_socbushandler_b_valid <= 1'd1;
            basesoc_basesoc_socbushandler_b_payload_resp <= 1'd0;
            basesoc_basesoc_socbushandler_b_param_id <= basesoc_basesoc_socbushandler_ax_beat_param_id;
            if (basesoc_basesoc_socbushandler_b_ready) begin
                basesoc_basesoc_socbushandler_ax_beat_ready <= 1'd1;
                axi2axilite0_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0 <= 1'd0;
            basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
            if ((basesoc_basesoc_socbushandler_ar_valid & basesoc_basesoc_socbushandler_aw_valid)) begin
                if (basesoc_basesoc_socbushandler_last_ar_aw_n) begin
                    basesoc_basesoc_socbushandler_ax_burst_valid <= basesoc_basesoc_socbushandler_aw_valid;
                    basesoc_basesoc_socbushandler_aw_ready <= basesoc_basesoc_socbushandler_ax_burst_ready;
                    basesoc_basesoc_socbushandler_ax_burst_first <= basesoc_basesoc_socbushandler_aw_first;
                    basesoc_basesoc_socbushandler_ax_burst_last <= basesoc_basesoc_socbushandler_aw_last;
                    basesoc_basesoc_socbushandler_ax_burst_payload_addr <= basesoc_basesoc_socbushandler_aw_payload_addr;
                    basesoc_basesoc_socbushandler_ax_burst_payload_burst <= basesoc_basesoc_socbushandler_aw_payload_burst;
                    basesoc_basesoc_socbushandler_ax_burst_payload_len <= basesoc_basesoc_socbushandler_aw_payload_len;
                    basesoc_basesoc_socbushandler_ax_burst_payload_size <= basesoc_basesoc_socbushandler_aw_payload_size;
                    basesoc_basesoc_socbushandler_ax_burst_payload_lock <= basesoc_basesoc_socbushandler_aw_payload_lock;
                    basesoc_basesoc_socbushandler_ax_burst_payload_prot <= basesoc_basesoc_socbushandler_aw_payload_prot;
                    basesoc_basesoc_socbushandler_ax_burst_payload_cache <= basesoc_basesoc_socbushandler_aw_payload_cache;
                    basesoc_basesoc_socbushandler_ax_burst_payload_qos <= basesoc_basesoc_socbushandler_aw_payload_qos;
                    basesoc_basesoc_socbushandler_ax_burst_payload_region <= basesoc_basesoc_socbushandler_aw_payload_region;
                    basesoc_basesoc_socbushandler_ax_burst_param_id <= basesoc_basesoc_socbushandler_aw_param_id;
                    basesoc_basesoc_socbushandler_ax_burst_param_dest <= basesoc_basesoc_socbushandler_aw_param_dest;
                    basesoc_basesoc_socbushandler_ax_burst_param_user <= basesoc_basesoc_socbushandler_aw_param_user;
                    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    axi2axilite0_next_state <= 2'd2;
                end else begin
                    basesoc_basesoc_socbushandler_ax_burst_valid <= basesoc_basesoc_socbushandler_ar_valid;
                    basesoc_basesoc_socbushandler_ar_ready <= basesoc_basesoc_socbushandler_ax_burst_ready;
                    basesoc_basesoc_socbushandler_ax_burst_first <= basesoc_basesoc_socbushandler_ar_first;
                    basesoc_basesoc_socbushandler_ax_burst_last <= basesoc_basesoc_socbushandler_ar_last;
                    basesoc_basesoc_socbushandler_ax_burst_payload_addr <= basesoc_basesoc_socbushandler_ar_payload_addr;
                    basesoc_basesoc_socbushandler_ax_burst_payload_burst <= basesoc_basesoc_socbushandler_ar_payload_burst;
                    basesoc_basesoc_socbushandler_ax_burst_payload_len <= basesoc_basesoc_socbushandler_ar_payload_len;
                    basesoc_basesoc_socbushandler_ax_burst_payload_size <= basesoc_basesoc_socbushandler_ar_payload_size;
                    basesoc_basesoc_socbushandler_ax_burst_payload_lock <= basesoc_basesoc_socbushandler_ar_payload_lock;
                    basesoc_basesoc_socbushandler_ax_burst_payload_prot <= basesoc_basesoc_socbushandler_ar_payload_prot;
                    basesoc_basesoc_socbushandler_ax_burst_payload_cache <= basesoc_basesoc_socbushandler_ar_payload_cache;
                    basesoc_basesoc_socbushandler_ax_burst_payload_qos <= basesoc_basesoc_socbushandler_ar_payload_qos;
                    basesoc_basesoc_socbushandler_ax_burst_payload_region <= basesoc_basesoc_socbushandler_ar_payload_region;
                    basesoc_basesoc_socbushandler_ax_burst_param_id <= basesoc_basesoc_socbushandler_ar_param_id;
                    basesoc_basesoc_socbushandler_ax_burst_param_dest <= basesoc_basesoc_socbushandler_ar_param_dest;
                    basesoc_basesoc_socbushandler_ax_burst_param_user <= basesoc_basesoc_socbushandler_ar_param_user;
                    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    axi2axilite0_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_basesoc_socbushandler_ar_valid) begin
                    basesoc_basesoc_socbushandler_ax_burst_valid <= basesoc_basesoc_socbushandler_ar_valid;
                    basesoc_basesoc_socbushandler_ar_ready <= basesoc_basesoc_socbushandler_ax_burst_ready;
                    basesoc_basesoc_socbushandler_ax_burst_first <= basesoc_basesoc_socbushandler_ar_first;
                    basesoc_basesoc_socbushandler_ax_burst_last <= basesoc_basesoc_socbushandler_ar_last;
                    basesoc_basesoc_socbushandler_ax_burst_payload_addr <= basesoc_basesoc_socbushandler_ar_payload_addr;
                    basesoc_basesoc_socbushandler_ax_burst_payload_burst <= basesoc_basesoc_socbushandler_ar_payload_burst;
                    basesoc_basesoc_socbushandler_ax_burst_payload_len <= basesoc_basesoc_socbushandler_ar_payload_len;
                    basesoc_basesoc_socbushandler_ax_burst_payload_size <= basesoc_basesoc_socbushandler_ar_payload_size;
                    basesoc_basesoc_socbushandler_ax_burst_payload_lock <= basesoc_basesoc_socbushandler_ar_payload_lock;
                    basesoc_basesoc_socbushandler_ax_burst_payload_prot <= basesoc_basesoc_socbushandler_ar_payload_prot;
                    basesoc_basesoc_socbushandler_ax_burst_payload_cache <= basesoc_basesoc_socbushandler_ar_payload_cache;
                    basesoc_basesoc_socbushandler_ax_burst_payload_qos <= basesoc_basesoc_socbushandler_ar_payload_qos;
                    basesoc_basesoc_socbushandler_ax_burst_payload_region <= basesoc_basesoc_socbushandler_ar_payload_region;
                    basesoc_basesoc_socbushandler_ax_burst_param_id <= basesoc_basesoc_socbushandler_ar_param_id;
                    basesoc_basesoc_socbushandler_ax_burst_param_dest <= basesoc_basesoc_socbushandler_ar_param_dest;
                    basesoc_basesoc_socbushandler_ax_burst_param_user <= basesoc_basesoc_socbushandler_ar_param_user;
                    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
                    basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                    axi2axilite0_next_state <= 1'd1;
                end else begin
                    if (basesoc_basesoc_socbushandler_aw_valid) begin
                        basesoc_basesoc_socbushandler_ax_burst_valid <= basesoc_basesoc_socbushandler_aw_valid;
                        basesoc_basesoc_socbushandler_aw_ready <= basesoc_basesoc_socbushandler_ax_burst_ready;
                        basesoc_basesoc_socbushandler_ax_burst_first <= basesoc_basesoc_socbushandler_aw_first;
                        basesoc_basesoc_socbushandler_ax_burst_last <= basesoc_basesoc_socbushandler_aw_last;
                        basesoc_basesoc_socbushandler_ax_burst_payload_addr <= basesoc_basesoc_socbushandler_aw_payload_addr;
                        basesoc_basesoc_socbushandler_ax_burst_payload_burst <= basesoc_basesoc_socbushandler_aw_payload_burst;
                        basesoc_basesoc_socbushandler_ax_burst_payload_len <= basesoc_basesoc_socbushandler_aw_payload_len;
                        basesoc_basesoc_socbushandler_ax_burst_payload_size <= basesoc_basesoc_socbushandler_aw_payload_size;
                        basesoc_basesoc_socbushandler_ax_burst_payload_lock <= basesoc_basesoc_socbushandler_aw_payload_lock;
                        basesoc_basesoc_socbushandler_ax_burst_payload_prot <= basesoc_basesoc_socbushandler_aw_payload_prot;
                        basesoc_basesoc_socbushandler_ax_burst_payload_cache <= basesoc_basesoc_socbushandler_aw_payload_cache;
                        basesoc_basesoc_socbushandler_ax_burst_payload_qos <= basesoc_basesoc_socbushandler_aw_payload_qos;
                        basesoc_basesoc_socbushandler_ax_burst_payload_region <= basesoc_basesoc_socbushandler_aw_payload_region;
                        basesoc_basesoc_socbushandler_ax_burst_param_id <= basesoc_basesoc_socbushandler_aw_param_id;
                        basesoc_basesoc_socbushandler_ax_burst_param_dest <= basesoc_basesoc_socbushandler_aw_param_dest;
                        basesoc_basesoc_socbushandler_ax_burst_param_user <= basesoc_basesoc_socbushandler_aw_param_user;
                        basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
                        basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
                        axi2axilite0_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign basesoc_slave_sink_sink_valid = basesoc_slave_ax_burst_valid;
assign basesoc_slave_ax_burst_ready = basesoc_slave_sink_sink_ready;
assign basesoc_slave_sink_sink_first = basesoc_slave_ax_burst_first;
assign basesoc_slave_sink_sink_last = basesoc_slave_ax_burst_last;
assign basesoc_slave_sink_sink_payload_addr = basesoc_slave_ax_burst_payload_addr;
assign basesoc_slave_sink_sink_payload_burst = basesoc_slave_ax_burst_payload_burst;
assign basesoc_slave_sink_sink_payload_len = basesoc_slave_ax_burst_payload_len;
assign basesoc_slave_sink_sink_payload_size = basesoc_slave_ax_burst_payload_size;
assign basesoc_slave_sink_sink_payload_lock = basesoc_slave_ax_burst_payload_lock;
assign basesoc_slave_sink_sink_payload_prot = basesoc_slave_ax_burst_payload_prot;
assign basesoc_slave_sink_sink_payload_cache = basesoc_slave_ax_burst_payload_cache;
assign basesoc_slave_sink_sink_payload_qos = basesoc_slave_ax_burst_payload_qos;
assign basesoc_slave_sink_sink_payload_region = basesoc_slave_ax_burst_payload_region;
assign basesoc_slave_sink_sink_param_id = basesoc_slave_ax_burst_param_id;
assign basesoc_slave_sink_sink_param_dest = basesoc_slave_ax_burst_param_dest;
assign basesoc_slave_sink_sink_param_user = basesoc_slave_ax_burst_param_user;
assign basesoc_b_ready = 1'd1;
assign basesoc_slave_pipe_valid_sink_ready = ((~basesoc_slave_pipe_valid_source_valid) | basesoc_slave_pipe_valid_source_ready);
assign basesoc_slave_pipe_valid_sink_valid = basesoc_slave_sink_sink_valid;
assign basesoc_slave_sink_sink_ready = basesoc_slave_pipe_valid_sink_ready;
assign basesoc_slave_pipe_valid_sink_first = basesoc_slave_sink_sink_first;
assign basesoc_slave_pipe_valid_sink_last = basesoc_slave_sink_sink_last;
assign basesoc_slave_pipe_valid_sink_payload_addr = basesoc_slave_sink_sink_payload_addr;
assign basesoc_slave_pipe_valid_sink_payload_burst = basesoc_slave_sink_sink_payload_burst;
assign basesoc_slave_pipe_valid_sink_payload_len = basesoc_slave_sink_sink_payload_len;
assign basesoc_slave_pipe_valid_sink_payload_size = basesoc_slave_sink_sink_payload_size;
assign basesoc_slave_pipe_valid_sink_payload_lock = basesoc_slave_sink_sink_payload_lock;
assign basesoc_slave_pipe_valid_sink_payload_prot = basesoc_slave_sink_sink_payload_prot;
assign basesoc_slave_pipe_valid_sink_payload_cache = basesoc_slave_sink_sink_payload_cache;
assign basesoc_slave_pipe_valid_sink_payload_qos = basesoc_slave_sink_sink_payload_qos;
assign basesoc_slave_pipe_valid_sink_payload_region = basesoc_slave_sink_sink_payload_region;
assign basesoc_slave_pipe_valid_sink_param_id = basesoc_slave_sink_sink_param_id;
assign basesoc_slave_pipe_valid_sink_param_dest = basesoc_slave_sink_sink_param_dest;
assign basesoc_slave_pipe_valid_sink_param_user = basesoc_slave_sink_sink_param_user;
assign basesoc_slave_source_source_valid = basesoc_slave_pipe_valid_source_valid;
assign basesoc_slave_pipe_valid_source_ready = basesoc_slave_source_source_ready;
assign basesoc_slave_source_source_first = basesoc_slave_pipe_valid_source_first;
assign basesoc_slave_source_source_last = basesoc_slave_pipe_valid_source_last;
assign basesoc_slave_source_source_payload_addr = basesoc_slave_pipe_valid_source_payload_addr;
assign basesoc_slave_source_source_payload_burst = basesoc_slave_pipe_valid_source_payload_burst;
assign basesoc_slave_source_source_payload_len = basesoc_slave_pipe_valid_source_payload_len;
assign basesoc_slave_source_source_payload_size = basesoc_slave_pipe_valid_source_payload_size;
assign basesoc_slave_source_source_payload_lock = basesoc_slave_pipe_valid_source_payload_lock;
assign basesoc_slave_source_source_payload_prot = basesoc_slave_pipe_valid_source_payload_prot;
assign basesoc_slave_source_source_payload_cache = basesoc_slave_pipe_valid_source_payload_cache;
assign basesoc_slave_source_source_payload_qos = basesoc_slave_pipe_valid_source_payload_qos;
assign basesoc_slave_source_source_payload_region = basesoc_slave_pipe_valid_source_payload_region;
assign basesoc_slave_source_source_param_id = basesoc_slave_pipe_valid_source_param_id;
assign basesoc_slave_source_source_param_dest = basesoc_slave_pipe_valid_source_param_dest;
assign basesoc_slave_source_source_param_user = basesoc_slave_pipe_valid_source_param_user;
assign basesoc_slave_beat_size = (1'd1 <<< basesoc_slave_source_source_payload_size);
assign basesoc_slave_beat_wrap = (basesoc_slave_source_source_payload_len <<< basesoc_slave_source_source_payload_size);
assign basesoc_slave_ax_beat_valid = (basesoc_slave_source_source_valid | (~basesoc_slave_ax_beat_first));
assign basesoc_slave_ax_beat_first = (basesoc_slave_beat_count == 1'd0);
assign basesoc_slave_ax_beat_last = (basesoc_slave_beat_count == basesoc_slave_source_source_payload_len);
assign basesoc_slave_ax_beat_payload_addr = ($signed({1'd0, basesoc_slave_source_source_payload_addr}) + basesoc_slave_beat_offset);
assign basesoc_slave_ax_beat_param_id = basesoc_slave_source_source_param_id;
always @(*) begin
    basesoc_slave_source_source_ready <= 1'd0;
    if (basesoc_slave_ax_beat_ready) begin
        if (basesoc_slave_ax_beat_last) begin
            basesoc_slave_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    axi2axilite1_next_state <= 2'd0;
    basesoc_ar_payload_addr <= 32'd0;
    basesoc_ar_valid <= 1'd0;
    basesoc_aw_payload_addr <= 32'd0;
    basesoc_aw_valid <= 1'd0;
    basesoc_r_ready <= 1'd0;
    basesoc_slave_ar_ready <= 1'd0;
    basesoc_slave_aw_ready <= 1'd0;
    basesoc_slave_ax_beat_ready <= 1'd0;
    basesoc_slave_ax_burst_first <= 1'd0;
    basesoc_slave_ax_burst_last <= 1'd0;
    basesoc_slave_ax_burst_param_dest <= 1'd0;
    basesoc_slave_ax_burst_param_id <= 1'd0;
    basesoc_slave_ax_burst_param_user <= 1'd0;
    basesoc_slave_ax_burst_payload_addr <= 32'd0;
    basesoc_slave_ax_burst_payload_burst <= 2'd0;
    basesoc_slave_ax_burst_payload_cache <= 4'd0;
    basesoc_slave_ax_burst_payload_len <= 8'd0;
    basesoc_slave_ax_burst_payload_lock <= 1'd0;
    basesoc_slave_ax_burst_payload_prot <= 3'd0;
    basesoc_slave_ax_burst_payload_qos <= 4'd0;
    basesoc_slave_ax_burst_payload_region <= 4'd0;
    basesoc_slave_ax_burst_payload_size <= 3'd0;
    basesoc_slave_ax_burst_valid <= 1'd0;
    basesoc_slave_b_param_id <= 1'd0;
    basesoc_slave_b_payload_resp <= 2'd0;
    basesoc_slave_b_valid <= 1'd0;
    basesoc_slave_cmd_done_axi2axilite1_next_value0 <= 1'd0;
    basesoc_slave_cmd_done_axi2axilite1_next_value_ce0 <= 1'd0;
    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd0;
    basesoc_slave_r_last <= 1'd0;
    basesoc_slave_r_param_id <= 1'd0;
    basesoc_slave_r_payload_data <= 32'd0;
    basesoc_slave_r_payload_resp <= 2'd0;
    basesoc_slave_r_valid <= 1'd0;
    basesoc_slave_w_ready <= 1'd0;
    basesoc_w_payload_data <= 32'd0;
    basesoc_w_payload_strb <= 4'd0;
    basesoc_w_valid <= 1'd0;
    axi2axilite1_next_state <= axi2axilite1_state;
    case (axi2axilite1_state)
        1'd1: begin
            basesoc_ar_valid <= (basesoc_slave_ax_beat_valid & (~basesoc_slave_cmd_done));
            basesoc_ar_payload_addr <= basesoc_slave_ax_beat_payload_addr;
            basesoc_slave_ax_beat_ready <= (basesoc_ar_ready & (~basesoc_slave_cmd_done));
            if ((basesoc_slave_ax_beat_valid & basesoc_slave_ax_beat_last)) begin
                if (basesoc_ar_ready) begin
                    basesoc_slave_ax_beat_ready <= 1'd0;
                    basesoc_slave_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    basesoc_slave_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_slave_r_valid <= basesoc_r_valid;
            basesoc_slave_r_last <= basesoc_slave_cmd_done;
            basesoc_slave_r_payload_resp <= 1'd0;
            basesoc_slave_r_param_id <= basesoc_slave_ax_beat_param_id;
            basesoc_slave_r_payload_data <= basesoc_r_payload_data;
            basesoc_r_ready <= basesoc_slave_r_ready;
            if (((basesoc_slave_r_valid & basesoc_slave_r_last) & basesoc_slave_r_ready)) begin
                basesoc_slave_ax_beat_ready <= 1'd1;
                axi2axilite1_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_aw_valid <= (basesoc_slave_ax_beat_valid & (~basesoc_slave_cmd_done));
            basesoc_aw_payload_addr <= basesoc_slave_ax_beat_payload_addr;
            basesoc_slave_ax_beat_ready <= (basesoc_aw_ready & (~basesoc_slave_cmd_done));
            if ((basesoc_slave_ax_beat_valid & basesoc_slave_ax_beat_last)) begin
                if (basesoc_aw_ready) begin
                    basesoc_slave_ax_beat_ready <= 1'd0;
                    basesoc_slave_cmd_done_axi2axilite1_next_value0 <= 1'd1;
                    basesoc_slave_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_w_valid <= basesoc_slave_w_valid;
            basesoc_w_payload_data <= basesoc_slave_w_payload_data;
            basesoc_w_payload_strb <= basesoc_slave_w_payload_strb;
            basesoc_slave_w_ready <= basesoc_w_ready;
            if (((basesoc_slave_w_valid & basesoc_slave_w_last) & basesoc_slave_w_ready)) begin
                axi2axilite1_next_state <= 2'd3;
            end
        end
        2'd3: begin
            basesoc_slave_b_valid <= 1'd1;
            basesoc_slave_b_payload_resp <= 1'd0;
            basesoc_slave_b_param_id <= basesoc_slave_ax_beat_param_id;
            if (basesoc_slave_b_ready) begin
                basesoc_slave_ax_beat_ready <= 1'd1;
                axi2axilite1_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_slave_cmd_done_axi2axilite1_next_value0 <= 1'd0;
            basesoc_slave_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
            if ((basesoc_slave_ar_valid & basesoc_slave_aw_valid)) begin
                if (basesoc_slave_last_ar_aw_n) begin
                    basesoc_slave_ax_burst_valid <= basesoc_slave_aw_valid;
                    basesoc_slave_aw_ready <= basesoc_slave_ax_burst_ready;
                    basesoc_slave_ax_burst_first <= basesoc_slave_aw_first;
                    basesoc_slave_ax_burst_last <= basesoc_slave_aw_last;
                    basesoc_slave_ax_burst_payload_addr <= basesoc_slave_aw_payload_addr;
                    basesoc_slave_ax_burst_payload_burst <= basesoc_slave_aw_payload_burst;
                    basesoc_slave_ax_burst_payload_len <= basesoc_slave_aw_payload_len;
                    basesoc_slave_ax_burst_payload_size <= basesoc_slave_aw_payload_size;
                    basesoc_slave_ax_burst_payload_lock <= basesoc_slave_aw_payload_lock;
                    basesoc_slave_ax_burst_payload_prot <= basesoc_slave_aw_payload_prot;
                    basesoc_slave_ax_burst_payload_cache <= basesoc_slave_aw_payload_cache;
                    basesoc_slave_ax_burst_payload_qos <= basesoc_slave_aw_payload_qos;
                    basesoc_slave_ax_burst_payload_region <= basesoc_slave_aw_payload_region;
                    basesoc_slave_ax_burst_param_id <= basesoc_slave_aw_param_id;
                    basesoc_slave_ax_burst_param_dest <= basesoc_slave_aw_param_dest;
                    basesoc_slave_ax_burst_param_user <= basesoc_slave_aw_param_user;
                    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    axi2axilite1_next_state <= 2'd2;
                end else begin
                    basesoc_slave_ax_burst_valid <= basesoc_slave_ar_valid;
                    basesoc_slave_ar_ready <= basesoc_slave_ax_burst_ready;
                    basesoc_slave_ax_burst_first <= basesoc_slave_ar_first;
                    basesoc_slave_ax_burst_last <= basesoc_slave_ar_last;
                    basesoc_slave_ax_burst_payload_addr <= basesoc_slave_ar_payload_addr;
                    basesoc_slave_ax_burst_payload_burst <= basesoc_slave_ar_payload_burst;
                    basesoc_slave_ax_burst_payload_len <= basesoc_slave_ar_payload_len;
                    basesoc_slave_ax_burst_payload_size <= basesoc_slave_ar_payload_size;
                    basesoc_slave_ax_burst_payload_lock <= basesoc_slave_ar_payload_lock;
                    basesoc_slave_ax_burst_payload_prot <= basesoc_slave_ar_payload_prot;
                    basesoc_slave_ax_burst_payload_cache <= basesoc_slave_ar_payload_cache;
                    basesoc_slave_ax_burst_payload_qos <= basesoc_slave_ar_payload_qos;
                    basesoc_slave_ax_burst_payload_region <= basesoc_slave_ar_payload_region;
                    basesoc_slave_ax_burst_param_id <= basesoc_slave_ar_param_id;
                    basesoc_slave_ax_burst_param_dest <= basesoc_slave_ar_param_dest;
                    basesoc_slave_ax_burst_param_user <= basesoc_slave_ar_param_user;
                    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    axi2axilite1_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_slave_ar_valid) begin
                    basesoc_slave_ax_burst_valid <= basesoc_slave_ar_valid;
                    basesoc_slave_ar_ready <= basesoc_slave_ax_burst_ready;
                    basesoc_slave_ax_burst_first <= basesoc_slave_ar_first;
                    basesoc_slave_ax_burst_last <= basesoc_slave_ar_last;
                    basesoc_slave_ax_burst_payload_addr <= basesoc_slave_ar_payload_addr;
                    basesoc_slave_ax_burst_payload_burst <= basesoc_slave_ar_payload_burst;
                    basesoc_slave_ax_burst_payload_len <= basesoc_slave_ar_payload_len;
                    basesoc_slave_ax_burst_payload_size <= basesoc_slave_ar_payload_size;
                    basesoc_slave_ax_burst_payload_lock <= basesoc_slave_ar_payload_lock;
                    basesoc_slave_ax_burst_payload_prot <= basesoc_slave_ar_payload_prot;
                    basesoc_slave_ax_burst_payload_cache <= basesoc_slave_ar_payload_cache;
                    basesoc_slave_ax_burst_payload_qos <= basesoc_slave_ar_payload_qos;
                    basesoc_slave_ax_burst_payload_region <= basesoc_slave_ar_payload_region;
                    basesoc_slave_ax_burst_param_id <= basesoc_slave_ar_param_id;
                    basesoc_slave_ax_burst_param_dest <= basesoc_slave_ar_param_dest;
                    basesoc_slave_ax_burst_param_user <= basesoc_slave_ar_param_user;
                    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
                    basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                    axi2axilite1_next_state <= 1'd1;
                end else begin
                    if (basesoc_slave_aw_valid) begin
                        basesoc_slave_ax_burst_valid <= basesoc_slave_aw_valid;
                        basesoc_slave_aw_ready <= basesoc_slave_ax_burst_ready;
                        basesoc_slave_ax_burst_first <= basesoc_slave_aw_first;
                        basesoc_slave_ax_burst_last <= basesoc_slave_aw_last;
                        basesoc_slave_ax_burst_payload_addr <= basesoc_slave_aw_payload_addr;
                        basesoc_slave_ax_burst_payload_burst <= basesoc_slave_aw_payload_burst;
                        basesoc_slave_ax_burst_payload_len <= basesoc_slave_aw_payload_len;
                        basesoc_slave_ax_burst_payload_size <= basesoc_slave_aw_payload_size;
                        basesoc_slave_ax_burst_payload_lock <= basesoc_slave_aw_payload_lock;
                        basesoc_slave_ax_burst_payload_prot <= basesoc_slave_aw_payload_prot;
                        basesoc_slave_ax_burst_payload_cache <= basesoc_slave_aw_payload_cache;
                        basesoc_slave_ax_burst_payload_qos <= basesoc_slave_aw_payload_qos;
                        basesoc_slave_ax_burst_payload_region <= basesoc_slave_aw_payload_region;
                        basesoc_slave_ax_burst_param_id <= basesoc_slave_aw_param_id;
                        basesoc_slave_ax_burst_param_dest <= basesoc_slave_aw_param_dest;
                        basesoc_slave_ax_burst_param_user <= basesoc_slave_aw_param_user;
                        basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
                        basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
                        axi2axilite1_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign basesoc_socbushandler_sink_sink_valid = basesoc_socbushandler_ax_burst_valid;
assign basesoc_socbushandler_ax_burst_ready = basesoc_socbushandler_sink_sink_ready;
assign basesoc_socbushandler_sink_sink_first = basesoc_socbushandler_ax_burst_first;
assign basesoc_socbushandler_sink_sink_last = basesoc_socbushandler_ax_burst_last;
assign basesoc_socbushandler_sink_sink_payload_addr = basesoc_socbushandler_ax_burst_payload_addr;
assign basesoc_socbushandler_sink_sink_payload_burst = basesoc_socbushandler_ax_burst_payload_burst;
assign basesoc_socbushandler_sink_sink_payload_len = basesoc_socbushandler_ax_burst_payload_len;
assign basesoc_socbushandler_sink_sink_payload_size = basesoc_socbushandler_ax_burst_payload_size;
assign basesoc_socbushandler_sink_sink_payload_lock = basesoc_socbushandler_ax_burst_payload_lock;
assign basesoc_socbushandler_sink_sink_payload_prot = basesoc_socbushandler_ax_burst_payload_prot;
assign basesoc_socbushandler_sink_sink_payload_cache = basesoc_socbushandler_ax_burst_payload_cache;
assign basesoc_socbushandler_sink_sink_payload_qos = basesoc_socbushandler_ax_burst_payload_qos;
assign basesoc_socbushandler_sink_sink_payload_region = basesoc_socbushandler_ax_burst_payload_region;
assign basesoc_socbushandler_sink_sink_param_id = basesoc_socbushandler_ax_burst_param_id;
assign basesoc_socbushandler_sink_sink_param_dest = basesoc_socbushandler_ax_burst_param_dest;
assign basesoc_socbushandler_sink_sink_param_user = basesoc_socbushandler_ax_burst_param_user;
assign basesoc_axiliteinterface_b_ready = 1'd1;
assign basesoc_socbushandler_pipe_valid_sink_ready = ((~basesoc_socbushandler_pipe_valid_source_valid) | basesoc_socbushandler_pipe_valid_source_ready);
assign basesoc_socbushandler_pipe_valid_sink_valid = basesoc_socbushandler_sink_sink_valid;
assign basesoc_socbushandler_sink_sink_ready = basesoc_socbushandler_pipe_valid_sink_ready;
assign basesoc_socbushandler_pipe_valid_sink_first = basesoc_socbushandler_sink_sink_first;
assign basesoc_socbushandler_pipe_valid_sink_last = basesoc_socbushandler_sink_sink_last;
assign basesoc_socbushandler_pipe_valid_sink_payload_addr = basesoc_socbushandler_sink_sink_payload_addr;
assign basesoc_socbushandler_pipe_valid_sink_payload_burst = basesoc_socbushandler_sink_sink_payload_burst;
assign basesoc_socbushandler_pipe_valid_sink_payload_len = basesoc_socbushandler_sink_sink_payload_len;
assign basesoc_socbushandler_pipe_valid_sink_payload_size = basesoc_socbushandler_sink_sink_payload_size;
assign basesoc_socbushandler_pipe_valid_sink_payload_lock = basesoc_socbushandler_sink_sink_payload_lock;
assign basesoc_socbushandler_pipe_valid_sink_payload_prot = basesoc_socbushandler_sink_sink_payload_prot;
assign basesoc_socbushandler_pipe_valid_sink_payload_cache = basesoc_socbushandler_sink_sink_payload_cache;
assign basesoc_socbushandler_pipe_valid_sink_payload_qos = basesoc_socbushandler_sink_sink_payload_qos;
assign basesoc_socbushandler_pipe_valid_sink_payload_region = basesoc_socbushandler_sink_sink_payload_region;
assign basesoc_socbushandler_pipe_valid_sink_param_id = basesoc_socbushandler_sink_sink_param_id;
assign basesoc_socbushandler_pipe_valid_sink_param_dest = basesoc_socbushandler_sink_sink_param_dest;
assign basesoc_socbushandler_pipe_valid_sink_param_user = basesoc_socbushandler_sink_sink_param_user;
assign basesoc_socbushandler_source_source_valid = basesoc_socbushandler_pipe_valid_source_valid;
assign basesoc_socbushandler_pipe_valid_source_ready = basesoc_socbushandler_source_source_ready;
assign basesoc_socbushandler_source_source_first = basesoc_socbushandler_pipe_valid_source_first;
assign basesoc_socbushandler_source_source_last = basesoc_socbushandler_pipe_valid_source_last;
assign basesoc_socbushandler_source_source_payload_addr = basesoc_socbushandler_pipe_valid_source_payload_addr;
assign basesoc_socbushandler_source_source_payload_burst = basesoc_socbushandler_pipe_valid_source_payload_burst;
assign basesoc_socbushandler_source_source_payload_len = basesoc_socbushandler_pipe_valid_source_payload_len;
assign basesoc_socbushandler_source_source_payload_size = basesoc_socbushandler_pipe_valid_source_payload_size;
assign basesoc_socbushandler_source_source_payload_lock = basesoc_socbushandler_pipe_valid_source_payload_lock;
assign basesoc_socbushandler_source_source_payload_prot = basesoc_socbushandler_pipe_valid_source_payload_prot;
assign basesoc_socbushandler_source_source_payload_cache = basesoc_socbushandler_pipe_valid_source_payload_cache;
assign basesoc_socbushandler_source_source_payload_qos = basesoc_socbushandler_pipe_valid_source_payload_qos;
assign basesoc_socbushandler_source_source_payload_region = basesoc_socbushandler_pipe_valid_source_payload_region;
assign basesoc_socbushandler_source_source_param_id = basesoc_socbushandler_pipe_valid_source_param_id;
assign basesoc_socbushandler_source_source_param_dest = basesoc_socbushandler_pipe_valid_source_param_dest;
assign basesoc_socbushandler_source_source_param_user = basesoc_socbushandler_pipe_valid_source_param_user;
assign basesoc_socbushandler_beat_size = (1'd1 <<< basesoc_socbushandler_source_source_payload_size);
assign basesoc_socbushandler_beat_wrap = (basesoc_socbushandler_source_source_payload_len <<< basesoc_socbushandler_source_source_payload_size);
assign basesoc_socbushandler_ax_beat_valid = (basesoc_socbushandler_source_source_valid | (~basesoc_socbushandler_ax_beat_first));
assign basesoc_socbushandler_ax_beat_first = (basesoc_socbushandler_beat_count == 1'd0);
assign basesoc_socbushandler_ax_beat_last = (basesoc_socbushandler_beat_count == basesoc_socbushandler_source_source_payload_len);
assign basesoc_socbushandler_ax_beat_payload_addr = ($signed({1'd0, basesoc_socbushandler_source_source_payload_addr}) + basesoc_socbushandler_beat_offset);
assign basesoc_socbushandler_ax_beat_param_id = basesoc_socbushandler_source_source_param_id;
always @(*) begin
    basesoc_socbushandler_source_source_ready <= 1'd0;
    if (basesoc_socbushandler_ax_beat_ready) begin
        if (basesoc_socbushandler_ax_beat_last) begin
            basesoc_socbushandler_source_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    axi2axilite2_next_state <= 2'd0;
    basesoc_axiliteinterface_ar_payload_addr <= 32'd0;
    basesoc_axiliteinterface_ar_valid <= 1'd0;
    basesoc_axiliteinterface_aw_payload_addr <= 32'd0;
    basesoc_axiliteinterface_aw_valid <= 1'd0;
    basesoc_axiliteinterface_r_ready <= 1'd0;
    basesoc_axiliteinterface_w_payload_data <= 32'd0;
    basesoc_axiliteinterface_w_payload_strb <= 4'd0;
    basesoc_axiliteinterface_w_valid <= 1'd0;
    basesoc_socbushandler_ar_ready <= 1'd0;
    basesoc_socbushandler_aw_ready <= 1'd0;
    basesoc_socbushandler_ax_beat_ready <= 1'd0;
    basesoc_socbushandler_ax_burst_first <= 1'd0;
    basesoc_socbushandler_ax_burst_last <= 1'd0;
    basesoc_socbushandler_ax_burst_param_dest <= 1'd0;
    basesoc_socbushandler_ax_burst_param_id <= 1'd0;
    basesoc_socbushandler_ax_burst_param_user <= 1'd0;
    basesoc_socbushandler_ax_burst_payload_addr <= 32'd0;
    basesoc_socbushandler_ax_burst_payload_burst <= 2'd0;
    basesoc_socbushandler_ax_burst_payload_cache <= 4'd0;
    basesoc_socbushandler_ax_burst_payload_len <= 8'd0;
    basesoc_socbushandler_ax_burst_payload_lock <= 1'd0;
    basesoc_socbushandler_ax_burst_payload_prot <= 3'd0;
    basesoc_socbushandler_ax_burst_payload_qos <= 4'd0;
    basesoc_socbushandler_ax_burst_payload_region <= 4'd0;
    basesoc_socbushandler_ax_burst_payload_size <= 3'd0;
    basesoc_socbushandler_ax_burst_valid <= 1'd0;
    basesoc_socbushandler_b_param_id <= 1'd0;
    basesoc_socbushandler_b_payload_resp <= 2'd0;
    basesoc_socbushandler_b_valid <= 1'd0;
    basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
    basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd0;
    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd0;
    basesoc_socbushandler_r_last <= 1'd0;
    basesoc_socbushandler_r_param_id <= 1'd0;
    basesoc_socbushandler_r_payload_data <= 32'd0;
    basesoc_socbushandler_r_payload_resp <= 2'd0;
    basesoc_socbushandler_r_valid <= 1'd0;
    basesoc_socbushandler_w_ready <= 1'd0;
    axi2axilite2_next_state <= axi2axilite2_state;
    case (axi2axilite2_state)
        1'd1: begin
            basesoc_axiliteinterface_ar_valid <= (basesoc_socbushandler_ax_beat_valid & (~basesoc_socbushandler_cmd_done));
            basesoc_axiliteinterface_ar_payload_addr <= basesoc_socbushandler_ax_beat_payload_addr;
            basesoc_socbushandler_ax_beat_ready <= (basesoc_axiliteinterface_ar_ready & (~basesoc_socbushandler_cmd_done));
            if ((basesoc_socbushandler_ax_beat_valid & basesoc_socbushandler_ax_beat_last)) begin
                if (basesoc_axiliteinterface_ar_ready) begin
                    basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_socbushandler_r_valid <= basesoc_axiliteinterface_r_valid;
            basesoc_socbushandler_r_last <= basesoc_socbushandler_cmd_done;
            basesoc_socbushandler_r_payload_resp <= 1'd0;
            basesoc_socbushandler_r_param_id <= basesoc_socbushandler_ax_beat_param_id;
            basesoc_socbushandler_r_payload_data <= basesoc_axiliteinterface_r_payload_data;
            basesoc_axiliteinterface_r_ready <= basesoc_socbushandler_r_ready;
            if (((basesoc_socbushandler_r_valid & basesoc_socbushandler_r_last) & basesoc_socbushandler_r_ready)) begin
                basesoc_socbushandler_ax_beat_ready <= 1'd1;
                axi2axilite2_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_axiliteinterface_aw_valid <= (basesoc_socbushandler_ax_beat_valid & (~basesoc_socbushandler_cmd_done));
            basesoc_axiliteinterface_aw_payload_addr <= basesoc_socbushandler_ax_beat_payload_addr;
            basesoc_socbushandler_ax_beat_ready <= (basesoc_axiliteinterface_aw_ready & (~basesoc_socbushandler_cmd_done));
            if ((basesoc_socbushandler_ax_beat_valid & basesoc_socbushandler_ax_beat_last)) begin
                if (basesoc_axiliteinterface_aw_ready) begin
                    basesoc_socbushandler_ax_beat_ready <= 1'd0;
                    basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd1;
                    basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
                end
            end
            basesoc_axiliteinterface_w_valid <= basesoc_socbushandler_w_valid;
            basesoc_axiliteinterface_w_payload_data <= basesoc_socbushandler_w_payload_data;
            basesoc_axiliteinterface_w_payload_strb <= basesoc_socbushandler_w_payload_strb;
            basesoc_socbushandler_w_ready <= basesoc_axiliteinterface_w_ready;
            if (((basesoc_socbushandler_w_valid & basesoc_socbushandler_w_last) & basesoc_socbushandler_w_ready)) begin
                axi2axilite2_next_state <= 2'd3;
            end
        end
        2'd3: begin
            basesoc_socbushandler_b_valid <= 1'd1;
            basesoc_socbushandler_b_payload_resp <= 1'd0;
            basesoc_socbushandler_b_param_id <= basesoc_socbushandler_ax_beat_param_id;
            if (basesoc_socbushandler_b_ready) begin
                basesoc_socbushandler_ax_beat_ready <= 1'd1;
                axi2axilite2_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_socbushandler_cmd_done_axi2axilite2_next_value0 <= 1'd0;
            basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0 <= 1'd1;
            if ((basesoc_socbushandler_ar_valid & basesoc_socbushandler_aw_valid)) begin
                if (basesoc_socbushandler_last_ar_aw_n) begin
                    basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_aw_valid;
                    basesoc_socbushandler_aw_ready <= basesoc_socbushandler_ax_burst_ready;
                    basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_aw_first;
                    basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_aw_last;
                    basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_aw_payload_addr;
                    basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_aw_payload_burst;
                    basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_aw_payload_len;
                    basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_aw_payload_size;
                    basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_aw_payload_lock;
                    basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_aw_payload_prot;
                    basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_aw_payload_cache;
                    basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_aw_payload_qos;
                    basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_aw_payload_region;
                    basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_aw_param_id;
                    basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_aw_param_dest;
                    basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_aw_param_user;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    axi2axilite2_next_state <= 2'd2;
                end else begin
                    basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_ar_valid;
                    basesoc_socbushandler_ar_ready <= basesoc_socbushandler_ax_burst_ready;
                    basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_ar_first;
                    basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_ar_last;
                    basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_ar_payload_addr;
                    basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_ar_payload_burst;
                    basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_ar_payload_len;
                    basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_ar_payload_size;
                    basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_ar_payload_lock;
                    basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_ar_payload_prot;
                    basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_ar_payload_cache;
                    basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_ar_payload_qos;
                    basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_ar_payload_region;
                    basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_ar_param_id;
                    basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_ar_param_dest;
                    basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_ar_param_user;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    axi2axilite2_next_state <= 1'd1;
                end
            end else begin
                if (basesoc_socbushandler_ar_valid) begin
                    basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_ar_valid;
                    basesoc_socbushandler_ar_ready <= basesoc_socbushandler_ax_burst_ready;
                    basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_ar_first;
                    basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_ar_last;
                    basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_ar_payload_addr;
                    basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_ar_payload_burst;
                    basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_ar_payload_len;
                    basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_ar_payload_size;
                    basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_ar_payload_lock;
                    basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_ar_payload_prot;
                    basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_ar_payload_cache;
                    basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_ar_payload_qos;
                    basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_ar_payload_region;
                    basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_ar_param_id;
                    basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_ar_param_dest;
                    basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_ar_param_user;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd1;
                    basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                    axi2axilite2_next_state <= 1'd1;
                end else begin
                    if (basesoc_socbushandler_aw_valid) begin
                        basesoc_socbushandler_ax_burst_valid <= basesoc_socbushandler_aw_valid;
                        basesoc_socbushandler_aw_ready <= basesoc_socbushandler_ax_burst_ready;
                        basesoc_socbushandler_ax_burst_first <= basesoc_socbushandler_aw_first;
                        basesoc_socbushandler_ax_burst_last <= basesoc_socbushandler_aw_last;
                        basesoc_socbushandler_ax_burst_payload_addr <= basesoc_socbushandler_aw_payload_addr;
                        basesoc_socbushandler_ax_burst_payload_burst <= basesoc_socbushandler_aw_payload_burst;
                        basesoc_socbushandler_ax_burst_payload_len <= basesoc_socbushandler_aw_payload_len;
                        basesoc_socbushandler_ax_burst_payload_size <= basesoc_socbushandler_aw_payload_size;
                        basesoc_socbushandler_ax_burst_payload_lock <= basesoc_socbushandler_aw_payload_lock;
                        basesoc_socbushandler_ax_burst_payload_prot <= basesoc_socbushandler_aw_payload_prot;
                        basesoc_socbushandler_ax_burst_payload_cache <= basesoc_socbushandler_aw_payload_cache;
                        basesoc_socbushandler_ax_burst_payload_qos <= basesoc_socbushandler_aw_payload_qos;
                        basesoc_socbushandler_ax_burst_payload_region <= basesoc_socbushandler_aw_payload_region;
                        basesoc_socbushandler_ax_burst_param_id <= basesoc_socbushandler_aw_param_id;
                        basesoc_socbushandler_ax_burst_param_dest <= basesoc_socbushandler_aw_param_dest;
                        basesoc_socbushandler_ax_burst_param_user <= basesoc_socbushandler_aw_param_user;
                        basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1 <= 1'd0;
                        basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1 <= 1'd1;
                        axi2axilite2_next_state <= 2'd2;
                    end
                end
            end
        end
    endcase
end
assign aw_valid = array_muxed0;
assign aw_first = array_muxed1;
assign aw_last = array_muxed2;
assign aw_payload_addr = array_muxed3;
assign aw_payload_burst = array_muxed4;
assign aw_payload_len = array_muxed5;
assign aw_payload_size = array_muxed6;
assign aw_payload_lock = array_muxed7;
assign aw_payload_prot = array_muxed8;
assign aw_payload_cache = array_muxed9;
assign aw_payload_qos = array_muxed10;
assign aw_payload_region = array_muxed11;
assign aw_param_id = array_muxed12;
assign aw_param_dest = array_muxed13;
assign aw_param_user = array_muxed14;
assign w_valid = array_muxed15;
assign w_first = array_muxed16;
assign w_last = array_muxed17;
assign w_payload_data = array_muxed18;
assign w_payload_strb = array_muxed19;
assign w_param_id = array_muxed20;
assign w_param_dest = array_muxed21;
assign w_param_user = array_muxed22;
assign b_ready = array_muxed23;
assign ar_valid = array_muxed24;
assign ar_first = array_muxed25;
assign ar_last = array_muxed26;
assign ar_payload_addr = array_muxed27;
assign ar_payload_burst = array_muxed28;
assign ar_payload_len = array_muxed29;
assign ar_payload_size = array_muxed30;
assign ar_payload_lock = array_muxed31;
assign ar_payload_prot = array_muxed32;
assign ar_payload_cache = array_muxed33;
assign ar_payload_qos = array_muxed34;
assign ar_payload_region = array_muxed35;
assign ar_param_id = array_muxed36;
assign ar_param_dest = array_muxed37;
assign ar_param_user = array_muxed38;
assign r_ready = array_muxed39;
always @(*) begin
    basesoc_master_aw_ready <= 1'd0;
    if ((rr_write_grant == 1'd0)) begin
        basesoc_master_aw_ready <= aw_ready;
    end
end
always @(*) begin
    basesoc_master_w_ready <= 1'd0;
    if ((rr_write_grant == 1'd0)) begin
        basesoc_master_w_ready <= w_ready;
    end
end
always @(*) begin
    basesoc_master_b_valid <= 1'd0;
    if ((rr_write_grant == 1'd0)) begin
        basesoc_master_b_valid <= b_valid;
    end
end
assign basesoc_master_b_first = b_first;
assign basesoc_master_b_last = b_last;
assign basesoc_master_b_payload_resp = b_payload_resp;
assign basesoc_master_b_param_id = b_param_id;
assign basesoc_master_b_param_dest = b_param_dest;
assign basesoc_master_b_param_user = b_param_user;
always @(*) begin
    basesoc_master_ar_ready <= 1'd0;
    if ((rr_read_grant == 1'd0)) begin
        basesoc_master_ar_ready <= ar_ready;
    end
end
always @(*) begin
    basesoc_master_r_valid <= 1'd0;
    if ((rr_read_grant == 1'd0)) begin
        basesoc_master_r_valid <= r_valid;
    end
end
assign basesoc_master_r_first = r_first;
assign basesoc_master_r_last = r_last;
assign basesoc_master_r_payload_resp = r_payload_resp;
assign basesoc_master_r_payload_data = r_payload_data;
assign basesoc_master_r_param_id = r_param_id;
assign basesoc_master_r_param_dest = r_param_dest;
assign basesoc_master_r_param_user = r_param_user;
assign rr_write_ce = ((~((aw_valid | w_valid) | b_valid)) & wr_lock_empty);
assign rr_read_ce = ((~(ar_valid | r_valid)) & rd_lock_empty);
assign rr_write_request = {((basesoc_master_aw_valid | basesoc_master_w_valid) | basesoc_master_b_valid)};
assign rr_read_request = {(basesoc_master_ar_valid | basesoc_master_r_valid)};
assign rr_write_grant = 1'd0;
assign rr_read_grant = 1'd0;
assign wr_lock_full = (wr_lock_counter == 8'd255);
assign wr_lock_empty = (wr_lock_counter == 1'd0);
assign wr_lock_stall = ((aw_valid & aw_ready) & wr_lock_full);
assign rd_lock_full = (rd_lock_counter == 8'd255);
assign rd_lock_empty = (rd_lock_counter == 1'd0);
assign rd_lock_stall = ((ar_valid & ar_ready) & rd_lock_full);
always @(*) begin
    slave_sel_dec0 <= 3'd0;
    slave_sel_dec0[0] <= (slice_proxy0[29:15] == 1'd0);
    slave_sel_dec0[1] <= (slice_proxy2[29:14] == 15'd16384);
    slave_sel_dec0[2] <= (slice_proxy4[29:14] == 16'd61440);
end
always @(*) begin
    slave_sel_dec1 <= 3'd0;
    slave_sel_dec1[0] <= (slice_proxy1[29:15] == 1'd0);
    slave_sel_dec1[1] <= (slice_proxy3[29:14] == 15'd16384);
    slave_sel_dec1[2] <= (slice_proxy5[29:14] == 16'd61440);
end
always @(*) begin
    slave_sel0 <= 3'd0;
    if (axirequestcounter0_empty) begin
        slave_sel0 <= slave_sel_dec0;
    end else begin
        slave_sel0 <= slave_sel_reg0;
    end
end
always @(*) begin
    slave_sel1 <= 3'd0;
    if (axirequestcounter1_empty) begin
        slave_sel1 <= slave_sel_dec1;
    end else begin
        slave_sel1 <= slave_sel_reg1;
    end
end
assign basesoc_basesoc_socbushandler_aw_valid = (aw_valid & slave_sel0[0]);
assign basesoc_basesoc_socbushandler_aw_first = aw_first;
assign basesoc_basesoc_socbushandler_aw_last = aw_last;
assign basesoc_basesoc_socbushandler_aw_payload_addr = aw_payload_addr;
assign basesoc_basesoc_socbushandler_aw_payload_burst = aw_payload_burst;
assign basesoc_basesoc_socbushandler_aw_payload_len = aw_payload_len;
assign basesoc_basesoc_socbushandler_aw_payload_size = aw_payload_size;
assign basesoc_basesoc_socbushandler_aw_payload_lock = aw_payload_lock;
assign basesoc_basesoc_socbushandler_aw_payload_prot = aw_payload_prot;
assign basesoc_basesoc_socbushandler_aw_payload_cache = aw_payload_cache;
assign basesoc_basesoc_socbushandler_aw_payload_qos = aw_payload_qos;
assign basesoc_basesoc_socbushandler_aw_payload_region = aw_payload_region;
assign basesoc_basesoc_socbushandler_aw_param_id = aw_param_id;
assign basesoc_basesoc_socbushandler_aw_param_dest = aw_param_dest;
assign basesoc_basesoc_socbushandler_aw_param_user = aw_param_user;
assign basesoc_basesoc_socbushandler_w_valid = (w_valid & slave_sel0[0]);
assign basesoc_basesoc_socbushandler_w_first = w_first;
assign basesoc_basesoc_socbushandler_w_last = w_last;
assign basesoc_basesoc_socbushandler_w_payload_data = w_payload_data;
assign basesoc_basesoc_socbushandler_w_payload_strb = w_payload_strb;
assign basesoc_basesoc_socbushandler_w_param_id = w_param_id;
assign basesoc_basesoc_socbushandler_w_param_dest = w_param_dest;
assign basesoc_basesoc_socbushandler_w_param_user = w_param_user;
assign basesoc_basesoc_socbushandler_b_ready = (b_ready & slave_sel0[0]);
assign basesoc_basesoc_socbushandler_ar_valid = (ar_valid & slave_sel1[0]);
assign basesoc_basesoc_socbushandler_ar_first = ar_first;
assign basesoc_basesoc_socbushandler_ar_last = ar_last;
assign basesoc_basesoc_socbushandler_ar_payload_addr = ar_payload_addr;
assign basesoc_basesoc_socbushandler_ar_payload_burst = ar_payload_burst;
assign basesoc_basesoc_socbushandler_ar_payload_len = ar_payload_len;
assign basesoc_basesoc_socbushandler_ar_payload_size = ar_payload_size;
assign basesoc_basesoc_socbushandler_ar_payload_lock = ar_payload_lock;
assign basesoc_basesoc_socbushandler_ar_payload_prot = ar_payload_prot;
assign basesoc_basesoc_socbushandler_ar_payload_cache = ar_payload_cache;
assign basesoc_basesoc_socbushandler_ar_payload_qos = ar_payload_qos;
assign basesoc_basesoc_socbushandler_ar_payload_region = ar_payload_region;
assign basesoc_basesoc_socbushandler_ar_param_id = ar_param_id;
assign basesoc_basesoc_socbushandler_ar_param_dest = ar_param_dest;
assign basesoc_basesoc_socbushandler_ar_param_user = ar_param_user;
assign basesoc_basesoc_socbushandler_r_ready = (r_ready & slave_sel1[0]);
assign basesoc_slave_aw_valid = (aw_valid & slave_sel0[1]);
assign basesoc_slave_aw_first = aw_first;
assign basesoc_slave_aw_last = aw_last;
assign basesoc_slave_aw_payload_addr = aw_payload_addr;
assign basesoc_slave_aw_payload_burst = aw_payload_burst;
assign basesoc_slave_aw_payload_len = aw_payload_len;
assign basesoc_slave_aw_payload_size = aw_payload_size;
assign basesoc_slave_aw_payload_lock = aw_payload_lock;
assign basesoc_slave_aw_payload_prot = aw_payload_prot;
assign basesoc_slave_aw_payload_cache = aw_payload_cache;
assign basesoc_slave_aw_payload_qos = aw_payload_qos;
assign basesoc_slave_aw_payload_region = aw_payload_region;
assign basesoc_slave_aw_param_id = aw_param_id;
assign basesoc_slave_aw_param_dest = aw_param_dest;
assign basesoc_slave_aw_param_user = aw_param_user;
assign basesoc_slave_w_valid = (w_valid & slave_sel0[1]);
assign basesoc_slave_w_first = w_first;
assign basesoc_slave_w_last = w_last;
assign basesoc_slave_w_payload_data = w_payload_data;
assign basesoc_slave_w_payload_strb = w_payload_strb;
assign basesoc_slave_w_param_id = w_param_id;
assign basesoc_slave_w_param_dest = w_param_dest;
assign basesoc_slave_w_param_user = w_param_user;
assign basesoc_slave_b_ready = (b_ready & slave_sel0[1]);
assign basesoc_slave_ar_valid = (ar_valid & slave_sel1[1]);
assign basesoc_slave_ar_first = ar_first;
assign basesoc_slave_ar_last = ar_last;
assign basesoc_slave_ar_payload_addr = ar_payload_addr;
assign basesoc_slave_ar_payload_burst = ar_payload_burst;
assign basesoc_slave_ar_payload_len = ar_payload_len;
assign basesoc_slave_ar_payload_size = ar_payload_size;
assign basesoc_slave_ar_payload_lock = ar_payload_lock;
assign basesoc_slave_ar_payload_prot = ar_payload_prot;
assign basesoc_slave_ar_payload_cache = ar_payload_cache;
assign basesoc_slave_ar_payload_qos = ar_payload_qos;
assign basesoc_slave_ar_payload_region = ar_payload_region;
assign basesoc_slave_ar_param_id = ar_param_id;
assign basesoc_slave_ar_param_dest = ar_param_dest;
assign basesoc_slave_ar_param_user = ar_param_user;
assign basesoc_slave_r_ready = (r_ready & slave_sel1[1]);
assign basesoc_socbushandler_aw_valid = (aw_valid & slave_sel0[2]);
assign basesoc_socbushandler_aw_first = aw_first;
assign basesoc_socbushandler_aw_last = aw_last;
assign basesoc_socbushandler_aw_payload_addr = aw_payload_addr;
assign basesoc_socbushandler_aw_payload_burst = aw_payload_burst;
assign basesoc_socbushandler_aw_payload_len = aw_payload_len;
assign basesoc_socbushandler_aw_payload_size = aw_payload_size;
assign basesoc_socbushandler_aw_payload_lock = aw_payload_lock;
assign basesoc_socbushandler_aw_payload_prot = aw_payload_prot;
assign basesoc_socbushandler_aw_payload_cache = aw_payload_cache;
assign basesoc_socbushandler_aw_payload_qos = aw_payload_qos;
assign basesoc_socbushandler_aw_payload_region = aw_payload_region;
assign basesoc_socbushandler_aw_param_id = aw_param_id;
assign basesoc_socbushandler_aw_param_dest = aw_param_dest;
assign basesoc_socbushandler_aw_param_user = aw_param_user;
assign basesoc_socbushandler_w_valid = (w_valid & slave_sel0[2]);
assign basesoc_socbushandler_w_first = w_first;
assign basesoc_socbushandler_w_last = w_last;
assign basesoc_socbushandler_w_payload_data = w_payload_data;
assign basesoc_socbushandler_w_payload_strb = w_payload_strb;
assign basesoc_socbushandler_w_param_id = w_param_id;
assign basesoc_socbushandler_w_param_dest = w_param_dest;
assign basesoc_socbushandler_w_param_user = w_param_user;
assign basesoc_socbushandler_b_ready = (b_ready & slave_sel0[2]);
assign basesoc_socbushandler_ar_valid = (ar_valid & slave_sel1[2]);
assign basesoc_socbushandler_ar_first = ar_first;
assign basesoc_socbushandler_ar_last = ar_last;
assign basesoc_socbushandler_ar_payload_addr = ar_payload_addr;
assign basesoc_socbushandler_ar_payload_burst = ar_payload_burst;
assign basesoc_socbushandler_ar_payload_len = ar_payload_len;
assign basesoc_socbushandler_ar_payload_size = ar_payload_size;
assign basesoc_socbushandler_ar_payload_lock = ar_payload_lock;
assign basesoc_socbushandler_ar_payload_prot = ar_payload_prot;
assign basesoc_socbushandler_ar_payload_cache = ar_payload_cache;
assign basesoc_socbushandler_ar_payload_qos = ar_payload_qos;
assign basesoc_socbushandler_ar_payload_region = ar_payload_region;
assign basesoc_socbushandler_ar_param_id = ar_param_id;
assign basesoc_socbushandler_ar_param_dest = ar_param_dest;
assign basesoc_socbushandler_ar_param_user = ar_param_user;
assign basesoc_socbushandler_r_ready = (r_ready & slave_sel1[2]);
assign b_first = (((basesoc_basesoc_socbushandler_b_first & {1{slave_sel0[0]}}) | (basesoc_slave_b_first & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_first & {1{slave_sel0[2]}}));
assign b_last = (((basesoc_basesoc_socbushandler_b_last & {1{slave_sel0[0]}}) | (basesoc_slave_b_last & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_last & {1{slave_sel0[2]}}));
assign b_param_id = (((basesoc_basesoc_socbushandler_b_param_id & {1{slave_sel0[0]}}) | (basesoc_slave_b_param_id & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_param_id & {1{slave_sel0[2]}}));
assign b_param_dest = (((basesoc_basesoc_socbushandler_b_param_dest & {1{slave_sel0[0]}}) | (basesoc_slave_b_param_dest & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_param_dest & {1{slave_sel0[2]}}));
assign b_param_user = (((basesoc_basesoc_socbushandler_b_param_user & {1{slave_sel0[0]}}) | (basesoc_slave_b_param_user & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_param_user & {1{slave_sel0[2]}}));
assign r_first = (((basesoc_basesoc_socbushandler_r_first & {1{slave_sel1[0]}}) | (basesoc_slave_r_first & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_first & {1{slave_sel1[2]}}));
assign r_param_id = (((basesoc_basesoc_socbushandler_r_param_id & {1{slave_sel1[0]}}) | (basesoc_slave_r_param_id & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_param_id & {1{slave_sel1[2]}}));
assign r_param_dest = (((basesoc_basesoc_socbushandler_r_param_dest & {1{slave_sel1[0]}}) | (basesoc_slave_r_param_dest & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_param_dest & {1{slave_sel1[2]}}));
assign r_param_user = (((basesoc_basesoc_socbushandler_r_param_user & {1{slave_sel1[0]}}) | (basesoc_slave_r_param_user & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_param_user & {1{slave_sel1[2]}}));
assign axirequestcounter0_full = (axirequestcounter0_counter == 8'd255);
assign axirequestcounter0_empty = (axirequestcounter0_counter == 1'd0);
assign axirequestcounter0_stall = ((aw_valid & aw_ready) & axirequestcounter0_full);
assign axirequestcounter1_full = (axirequestcounter1_counter == 8'd255);
assign axirequestcounter1_empty = (axirequestcounter1_counter == 1'd0);
assign axirequestcounter1_stall = ((ar_valid & ar_ready) & axirequestcounter1_full);
assign error = (wr_error | rd_error);
assign wr_timer_done = (wr_timer_count == 1'd0);
assign rd_timer_done = (rd_timer_count == 1'd0);
always @(*) begin
    aw_ready <= 1'd0;
    b_payload_resp <= 2'd0;
    b_valid <= 1'd0;
    fsm0_next_state <= 1'd0;
    w_ready <= 1'd0;
    wr_error <= 1'd0;
    wr_timer_wait <= 1'd0;
    aw_ready <= (((basesoc_basesoc_socbushandler_aw_ready & {1{slave_sel0[0]}}) | (basesoc_slave_aw_ready & {1{slave_sel0[1]}})) | (basesoc_socbushandler_aw_ready & {1{slave_sel0[2]}}));
    w_ready <= (((basesoc_basesoc_socbushandler_w_ready & {1{slave_sel0[0]}}) | (basesoc_slave_w_ready & {1{slave_sel0[1]}})) | (basesoc_socbushandler_w_ready & {1{slave_sel0[2]}}));
    b_valid <= (((basesoc_basesoc_socbushandler_b_valid & {1{slave_sel0[0]}}) | (basesoc_slave_b_valid & {1{slave_sel0[1]}})) | (basesoc_socbushandler_b_valid & {1{slave_sel0[2]}}));
    b_payload_resp <= (((basesoc_basesoc_socbushandler_b_payload_resp & {2{slave_sel0[0]}}) | (basesoc_slave_b_payload_resp & {2{slave_sel0[1]}})) | (basesoc_socbushandler_b_payload_resp & {2{slave_sel0[2]}}));
    fsm0_next_state <= fsm0_state;
    case (fsm0_state)
        1'd1: begin
            aw_ready <= aw_valid;
            w_ready <= w_valid;
            b_valid <= ((~aw_valid) & (~w_valid));
            b_payload_resp <= 2'd2;
            if ((b_valid & b_ready)) begin
                fsm0_next_state <= 1'd0;
            end
        end
        default: begin
            wr_timer_wait <= ((aw_valid & (~aw_ready)) | (w_valid & (~w_ready)));
            if ((wr_timer_done & wr_timer_wait)) begin
                wr_error <= 1'd1;
                fsm0_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    ar_ready <= 1'd0;
    fsm1_next_state <= 1'd0;
    r_last <= 1'd0;
    r_payload_data <= 32'd0;
    r_payload_resp <= 2'd0;
    r_valid <= 1'd0;
    rd_error <= 1'd0;
    rd_timer_wait <= 1'd0;
    ar_ready <= (((basesoc_basesoc_socbushandler_ar_ready & {1{slave_sel1[0]}}) | (basesoc_slave_ar_ready & {1{slave_sel1[1]}})) | (basesoc_socbushandler_ar_ready & {1{slave_sel1[2]}}));
    r_valid <= (((basesoc_basesoc_socbushandler_r_valid & {1{slave_sel1[0]}}) | (basesoc_slave_r_valid & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_valid & {1{slave_sel1[2]}}));
    r_last <= (((basesoc_basesoc_socbushandler_r_last & {1{slave_sel1[0]}}) | (basesoc_slave_r_last & {1{slave_sel1[1]}})) | (basesoc_socbushandler_r_last & {1{slave_sel1[2]}}));
    r_payload_resp <= (((basesoc_basesoc_socbushandler_r_payload_resp & {2{slave_sel1[0]}}) | (basesoc_slave_r_payload_resp & {2{slave_sel1[1]}})) | (basesoc_socbushandler_r_payload_resp & {2{slave_sel1[2]}}));
    r_payload_data <= (((basesoc_basesoc_socbushandler_r_payload_data & {32{slave_sel1[0]}}) | (basesoc_slave_r_payload_data & {32{slave_sel1[1]}})) | (basesoc_socbushandler_r_payload_data & {32{slave_sel1[2]}}));
    fsm1_next_state <= fsm1_state;
    case (fsm1_state)
        1'd1: begin
            ar_ready <= ar_valid;
            r_valid <= (~ar_valid);
            r_last <= 1'd1;
            r_payload_resp <= 2'd2;
            r_payload_data <= 32'd4294967295;
            if ((r_valid & r_ready)) begin
                fsm1_next_state <= 1'd0;
            end
        end
        default: begin
            rd_timer_wait <= (ar_valid & (~ar_ready));
            if ((rd_timer_done & rd_timer_wait)) begin
                rd_error <= 1'd1;
                fsm1_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_bus_errors_status = basesoc_bus_errors;
assign debug_por_clk = sys_clk;
assign basesoc_debug_ndmreset_rise = (basesoc_debug_ndmreset & (~basesoc_debug_ndmreset_last));
always @(*) begin
    crg_rst0 <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst0 <= 1'd1;
    end
    if (basesoc_debug_ndmreset_rise) begin
        crg_rst0 <= 1'd1;
    end
end
always @(*) begin
    basesoc_axilitesram0_next_state <= 2'd0;
    basesoc_basesoc_adr <= 15'd0;
    basesoc_basesoc_do_read <= 1'd0;
    basesoc_basesoc_do_write <= 1'd0;
    basesoc_basesoc_last_was_read_axilitesram0_next_value1 <= 1'd0;
    basesoc_basesoc_last_was_read_axilitesram0_next_value_ce1 <= 1'd0;
    basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value0 <= 32'd0;
    basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0 <= 1'd0;
    basesoc_basesoc_ram_bus_ar_ready <= 1'd0;
    basesoc_basesoc_ram_bus_aw_ready <= 1'd0;
    basesoc_basesoc_ram_bus_b_payload_resp <= 2'd0;
    basesoc_basesoc_ram_bus_b_valid <= 1'd0;
    basesoc_basesoc_ram_bus_r_payload_data <= 32'd0;
    basesoc_basesoc_ram_bus_r_payload_resp <= 2'd0;
    basesoc_basesoc_ram_bus_r_valid <= 1'd0;
    basesoc_basesoc_ram_bus_w_ready <= 1'd0;
    basesoc_axilitesram0_next_state <= basesoc_axilitesram0_state;
    case (basesoc_axilitesram0_state)
        1'd1: begin
            basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value0 <= basesoc_basesoc_dat_r;
            basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0 <= 1'd1;
            basesoc_axilitesram0_next_state <= 2'd2;
        end
        2'd2: begin
            basesoc_basesoc_last_was_read_axilitesram0_next_value1 <= 1'd1;
            basesoc_basesoc_last_was_read_axilitesram0_next_value_ce1 <= 1'd1;
            basesoc_basesoc_ram_bus_r_payload_data <= basesoc_basesoc_port_dat_r_latched;
            basesoc_basesoc_ram_bus_r_payload_resp <= 1'd0;
            basesoc_basesoc_ram_bus_r_valid <= 1'd1;
            if (basesoc_basesoc_ram_bus_r_ready) begin
                basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        2'd3: begin
            basesoc_basesoc_last_was_read_axilitesram0_next_value1 <= 1'd0;
            basesoc_basesoc_last_was_read_axilitesram0_next_value_ce1 <= 1'd1;
            basesoc_basesoc_ram_bus_b_valid <= 1'd1;
            basesoc_basesoc_ram_bus_b_payload_resp <= 1'd0;
            if (basesoc_basesoc_ram_bus_b_ready) begin
                basesoc_axilitesram0_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_basesoc_ram_bus_aw_valid & basesoc_basesoc_ram_bus_ar_valid)) begin
                basesoc_basesoc_do_write <= basesoc_basesoc_last_was_read;
                basesoc_basesoc_do_read <= (~basesoc_basesoc_last_was_read);
            end else begin
                basesoc_basesoc_do_write <= basesoc_basesoc_ram_bus_aw_valid;
                basesoc_basesoc_do_read <= basesoc_basesoc_ram_bus_ar_valid;
            end
            basesoc_basesoc_ram_bus_aw_ready <= (basesoc_basesoc_last_was_read | (~basesoc_basesoc_ram_bus_ar_valid));
            basesoc_basesoc_ram_bus_ar_ready <= ((~basesoc_basesoc_last_was_read) | (~basesoc_basesoc_ram_bus_aw_valid));
            if (basesoc_basesoc_do_write) begin
                basesoc_basesoc_adr <= basesoc_basesoc_ram_bus_aw_payload_addr[31:2];
                if (basesoc_basesoc_ram_bus_w_valid) begin
                    basesoc_basesoc_ram_bus_w_ready <= 1'd1;
                    basesoc_axilitesram0_next_state <= 2'd3;
                end
            end else begin
                if (basesoc_basesoc_do_read) begin
                    basesoc_basesoc_adr <= basesoc_basesoc_ram_bus_ar_payload_addr[31:2];
                    basesoc_axilitesram0_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    basesoc_ram_dat_w <= 32'd0;
    basesoc_ram_dat_w <= basesoc_w_payload_data;
    basesoc_ram_dat_w <= basesoc_w_payload_data;
end
always @(*) begin
    basesoc_ram_we <= 4'd0;
    basesoc_ram_we[0] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[0]);
    basesoc_ram_we[1] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[1]);
    basesoc_ram_we[2] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[2]);
    basesoc_ram_we[3] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[3]);
    basesoc_ram_we[0] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[0]);
    basesoc_ram_we[1] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[1]);
    basesoc_ram_we[2] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[2]);
    basesoc_ram_we[3] <= ((basesoc_w_valid & basesoc_w_ready) & basesoc_w_payload_strb[3]);
end
always @(*) begin
    basesoc_ar_ready <= 1'd0;
    basesoc_aw_ready <= 1'd0;
    basesoc_axilitesram1_next_state <= 2'd0;
    basesoc_b_payload_resp <= 2'd0;
    basesoc_b_valid <= 1'd0;
    basesoc_r_payload_data <= 32'd0;
    basesoc_r_payload_resp <= 2'd0;
    basesoc_r_valid <= 1'd0;
    basesoc_ram_adr <= 14'd0;
    basesoc_ram_do_read <= 1'd0;
    basesoc_ram_do_write <= 1'd0;
    basesoc_ram_last_was_read_axilitesram1_next_value1 <= 1'd0;
    basesoc_ram_last_was_read_axilitesram1_next_value_ce1 <= 1'd0;
    basesoc_ram_port_dat_r_latched_axilitesram1_next_value0 <= 32'd0;
    basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce0 <= 1'd0;
    basesoc_w_ready <= 1'd0;
    basesoc_axilitesram1_next_state <= basesoc_axilitesram1_state;
    case (basesoc_axilitesram1_state)
        1'd1: begin
            basesoc_ram_port_dat_r_latched_axilitesram1_next_value0 <= basesoc_ram_dat_r;
            basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce0 <= 1'd1;
            basesoc_axilitesram1_next_state <= 2'd2;
        end
        2'd2: begin
            basesoc_ram_last_was_read_axilitesram1_next_value1 <= 1'd1;
            basesoc_ram_last_was_read_axilitesram1_next_value_ce1 <= 1'd1;
            basesoc_r_payload_data <= basesoc_ram_port_dat_r_latched;
            basesoc_r_payload_resp <= 1'd0;
            basesoc_r_valid <= 1'd1;
            if (basesoc_r_ready) begin
                basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        2'd3: begin
            basesoc_ram_last_was_read_axilitesram1_next_value1 <= 1'd0;
            basesoc_ram_last_was_read_axilitesram1_next_value_ce1 <= 1'd1;
            basesoc_b_valid <= 1'd1;
            basesoc_b_payload_resp <= 1'd0;
            if (basesoc_b_ready) begin
                basesoc_axilitesram1_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_aw_valid & basesoc_ar_valid)) begin
                basesoc_ram_do_write <= basesoc_ram_last_was_read;
                basesoc_ram_do_read <= (~basesoc_ram_last_was_read);
            end else begin
                basesoc_ram_do_write <= basesoc_aw_valid;
                basesoc_ram_do_read <= basesoc_ar_valid;
            end
            basesoc_aw_ready <= (basesoc_ram_last_was_read | (~basesoc_ar_valid));
            basesoc_ar_ready <= ((~basesoc_ram_last_was_read) | (~basesoc_aw_valid));
            if (basesoc_ram_do_write) begin
                basesoc_ram_adr <= basesoc_aw_payload_addr[31:2];
                if (basesoc_w_valid) begin
                    basesoc_w_ready <= 1'd1;
                    basesoc_axilitesram1_next_state <= 2'd3;
                end
            end else begin
                if (basesoc_ram_do_read) begin
                    basesoc_ram_adr <= basesoc_ar_payload_addr[31:2];
                    basesoc_axilitesram1_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    basesoc_rs232phytx_next_state <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    basesoc_tx_enable <= 1'd0;
    basesoc_tx_sink_ready <= 1'd0;
    basesoc_rs232phytx_next_state <= basesoc_rs232phytx_state;
    case (basesoc_rs232phytx_state)
        1'd1: begin
            basesoc_tx_enable <= 1'd1;
            if (basesoc_tx_tick) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= basesoc_tx_data;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_count_rs232phytx_next_value0 <= (basesoc_tx_count + 1'd1);
                basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, basesoc_tx_data[7:1]};
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((basesoc_tx_count == 4'd9)) begin
                    basesoc_tx_sink_ready <= 1'd1;
                    basesoc_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (basesoc_tx_sink_valid) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= basesoc_tx_sink_payload_data;
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                basesoc_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rs232phyrx_next_state <= 1'd0;
    basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    basesoc_rx_enable <= 1'd0;
    basesoc_rx_source_payload_data <= 8'd0;
    basesoc_rx_source_valid <= 1'd0;
    basesoc_rs232phyrx_next_state <= basesoc_rs232phyrx_state;
    case (basesoc_rs232phyrx_state)
        1'd1: begin
            basesoc_rx_enable <= 1'd1;
            if (basesoc_rx_tick) begin
                basesoc_rx_count_rs232phyrx_next_value0 <= (basesoc_rx_count + 1'd1);
                basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                basesoc_rx_data_rs232phyrx_next_value1 <= {basesoc_rx_rx, basesoc_rx_data[7:1]};
                basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((basesoc_rx_count == 4'd9)) begin
                    basesoc_rx_source_valid <= (basesoc_rx_rx == 1'd1);
                    basesoc_rx_source_payload_data <= basesoc_rx_data;
                    basesoc_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((basesoc_rx_rx == 1'd0) & (basesoc_rx_rx_d == 1'd1))) begin
                basesoc_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_uart_uart_sink_valid = basesoc_rx_source_valid;
assign basesoc_rx_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_rx_source_first;
assign basesoc_uart_uart_sink_last = basesoc_rx_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_rx_source_payload_data;
assign basesoc_tx_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_tx_sink_ready;
assign basesoc_tx_sink_first = basesoc_uart_uart_source_first;
assign basesoc_tx_sink_last = basesoc_uart_uart_source_last;
assign basesoc_tx_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_txempty_status = (~basesoc_uart_tx_fifo_source_valid);
assign basesoc_uart_tx_trigger = basesoc_uart_tx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = (basesoc_uart_rx_clear | (1'd0 & basesoc_uart_rxtx_we));
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxfull_status = (~basesoc_uart_rx_fifo_sink_ready);
assign basesoc_uart_rx_trigger = basesoc_uart_rx_fifo_source_valid;
assign basesoc_uart_tx0 = basesoc_uart_tx_status;
assign basesoc_uart_tx1 = basesoc_uart_tx_pending;
always @(*) begin
    basesoc_uart_tx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[0])) begin
        basesoc_uart_tx_clear <= 1'd1;
    end
end
assign basesoc_uart_rx0 = basesoc_uart_rx_status;
assign basesoc_uart_rx1 = basesoc_uart_rx_pending;
always @(*) begin
    basesoc_uart_rx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[1])) begin
        basesoc_uart_rx_clear <= 1'd1;
    end
end
assign basesoc_uart_irq = ((basesoc_uart_pending_status[0] & basesoc_uart_enable_storage[0]) | (basesoc_uart_pending_status[1] & basesoc_uart_enable_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
    basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_tx_fifo_replace) begin
        basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
    end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
    basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_rx_fifo_replace) begin
        basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
    end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_timer_zero_trigger = (basesoc_timer_value == 1'd0);
assign basesoc_timer_zero0 = basesoc_timer_zero_status;
assign basesoc_timer_zero1 = basesoc_timer_zero_pending;
always @(*) begin
    basesoc_timer_zero_clear <= 1'd0;
    if ((basesoc_timer_pending_re & basesoc_timer_pending_r)) begin
        basesoc_timer_zero_clear <= 1'd1;
    end
end
assign basesoc_timer_irq = (basesoc_timer_pending_status & basesoc_timer_enable_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
assign wait_1 = (~done);
always @(*) begin
    leds <= 3'd0;
    if ((mode == 1'd1)) begin
        leds <= storage;
    end else begin
        leds <= chaser;
    end
end
//assign {user_led2, user_led1, user_led0} = (leds ^ 1'd0);
assign {user_led2, user_led1, user_led0} = leds ;
assign done = (count == 1'd0);
assign basesoc_dat_w = basesoc_axiliteinterface_w_payload_data;
assign basesoc_we = ((basesoc_axiliteinterface_w_valid & basesoc_axiliteinterface_w_ready) & (basesoc_axiliteinterface_w_payload_strb != 1'd0));
always @(*) begin
    basesoc_adr <= 14'd0;
    basesoc_axilite2csr_next_state <= 2'd0;
    basesoc_axiliteinterface_ar_ready <= 1'd0;
    basesoc_axiliteinterface_aw_ready <= 1'd0;
    basesoc_axiliteinterface_b_payload_resp <= 2'd0;
    basesoc_axiliteinterface_b_valid <= 1'd0;
    basesoc_axiliteinterface_r_payload_data <= 32'd0;
    basesoc_axiliteinterface_r_payload_resp <= 2'd0;
    basesoc_axiliteinterface_r_valid <= 1'd0;
    basesoc_axiliteinterface_w_ready <= 1'd0;
    basesoc_do_read <= 1'd0;
    basesoc_do_write <= 1'd0;
    basesoc_last_was_read_axilite2csr_next_value1 <= 1'd0;
    basesoc_last_was_read_axilite2csr_next_value_ce1 <= 1'd0;
    basesoc_port_dat_r_latched_axilite2csr_next_value0 <= 32'd0;
    basesoc_port_dat_r_latched_axilite2csr_next_value_ce0 <= 1'd0;
    basesoc_axilite2csr_next_state <= basesoc_axilite2csr_state;
    case (basesoc_axilite2csr_state)
        1'd1: begin
            basesoc_port_dat_r_latched_axilite2csr_next_value0 <= basesoc_dat_r;
            basesoc_port_dat_r_latched_axilite2csr_next_value_ce0 <= 1'd1;
            basesoc_axilite2csr_next_state <= 2'd2;
        end
        2'd2: begin
            basesoc_last_was_read_axilite2csr_next_value1 <= 1'd1;
            basesoc_last_was_read_axilite2csr_next_value_ce1 <= 1'd1;
            basesoc_axiliteinterface_r_payload_data <= basesoc_port_dat_r_latched;
            basesoc_axiliteinterface_r_payload_resp <= 1'd0;
            basesoc_axiliteinterface_r_valid <= 1'd1;
            if (basesoc_axiliteinterface_r_ready) begin
                basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        2'd3: begin
            basesoc_last_was_read_axilite2csr_next_value1 <= 1'd0;
            basesoc_last_was_read_axilite2csr_next_value_ce1 <= 1'd1;
            basesoc_axiliteinterface_b_valid <= 1'd1;
            basesoc_axiliteinterface_b_payload_resp <= 1'd0;
            if (basesoc_axiliteinterface_b_ready) begin
                basesoc_axilite2csr_next_state <= 1'd0;
            end
        end
        default: begin
            if ((basesoc_axiliteinterface_aw_valid & basesoc_axiliteinterface_ar_valid)) begin
                basesoc_do_write <= basesoc_last_was_read;
                basesoc_do_read <= (~basesoc_last_was_read);
            end else begin
                basesoc_do_write <= basesoc_axiliteinterface_aw_valid;
                basesoc_do_read <= basesoc_axiliteinterface_ar_valid;
            end
            basesoc_axiliteinterface_aw_ready <= (basesoc_last_was_read | (~basesoc_axiliteinterface_ar_valid));
            basesoc_axiliteinterface_ar_ready <= ((~basesoc_last_was_read) | (~basesoc_axiliteinterface_aw_valid));
            if (basesoc_do_write) begin
                basesoc_adr <= basesoc_axiliteinterface_aw_payload_addr[31:2];
                if (basesoc_axiliteinterface_w_valid) begin
                    basesoc_axiliteinterface_w_ready <= 1'd1;
                    basesoc_axilite2csr_next_state <= 2'd3;
                end
            end else begin
                if (basesoc_do_read) begin
                    basesoc_adr <= basesoc_axiliteinterface_ar_payload_addr[31:2];
                    basesoc_axilite2csr_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank0_reset0_re <= 1'd0;
    csrbank0_reset0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_reset0_re <= interface0_bank_bus_we;
        csrbank0_reset0_we <= (~interface0_bank_bus_we);
    end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_scratch0_re <= 1'd0;
    csrbank0_scratch0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_scratch0_re <= interface0_bank_bus_we;
        csrbank0_scratch0_we <= (~interface0_bank_bus_we);
    end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank0_bus_errors_re <= 1'd0;
    csrbank0_bus_errors_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank0_bus_errors_re <= interface0_bank_bus_we;
        csrbank0_bus_errors_we <= (~interface0_bank_bus_we);
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csrbank0_reset0_w = basesoc_reset_storage[1:0];
assign csrbank0_scratch0_w = basesoc_scratch_storage[31:0];
assign csrbank0_bus_errors_w = basesoc_bus_errors_status[31:0];
assign basesoc_bus_errors_we = csrbank0_bus_errors_we;
assign sram0_sel = (interface0_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    interface0_sram_bus_dat_r <= 32'd0;
    if (sram0_sel_r) begin
        interface0_sram_bus_dat_r <= sram0_dat_r;
    end
end
assign sram0_adr = interface0_sram_bus_adr[5:0];
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 3'd4);
assign csrbank1_out0_r = interface1_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank1_out0_re <= 1'd0;
    csrbank1_out0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_out0_re <= interface1_bank_bus_we;
        csrbank1_out0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_out0_w = storage[2:0];
assign sram1_sel = (interface1_sram_bus_adr[13:9] == 3'd5);
always @(*) begin
    interface1_sram_bus_dat_r <= 32'd0;
    if (sram1_sel_r) begin
        interface1_sram_bus_dat_r <= sram1_dat_r;
    end
end
assign sram1_we = (sram1_sel & interface1_sram_bus_we);
assign sram1_dat_w = interface1_sram_bus_dat_w;
assign sram1_adr = {sram1_storage, interface1_sram_bus_adr[8:0]};
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 3'd6);
assign csrbank2_rom_page0_r = interface2_bank_bus_dat_w[5:0];
always @(*) begin
    csrbank2_rom_page0_re <= 1'd0;
    csrbank2_rom_page0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_rom_page0_re <= interface2_bank_bus_we;
        csrbank2_rom_page0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_rom_page0_w = sram1_storage[5:0];
assign sram2_sel = (interface2_sram_bus_adr[13:9] == 3'd7);
always @(*) begin
    interface2_sram_bus_dat_r <= 32'd0;
    if (sram2_sel_r) begin
        interface2_sram_bus_dat_r <= sram2_dat_r;
    end
end
assign sram2_we = (sram2_sel & interface2_sram_bus_we);
assign sram2_dat_w = interface2_sram_bus_dat_w;
assign sram2_adr = {sram2_storage, interface2_sram_bus_adr[8:0]};
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 4'd8);
assign csrbank3_sram_page0_r = interface3_bank_bus_dat_w[4:0];
always @(*) begin
    csrbank3_sram_page0_re <= 1'd0;
    csrbank3_sram_page0_we <= 1'd0;
    if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank3_sram_page0_re <= interface3_bank_bus_we;
        csrbank3_sram_page0_we <= (~interface3_bank_bus_we);
    end
end
assign csrbank3_sram_page0_w = sram2_storage[4:0];
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 2'd3);
assign csrbank4_load0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_load0_re <= 1'd0;
    csrbank4_load0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank4_load0_re <= interface4_bank_bus_we;
        csrbank4_load0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_reload0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_reload0_re <= 1'd0;
    csrbank4_reload0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank4_reload0_re <= interface4_bank_bus_we;
        csrbank4_reload0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_en0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_en0_re <= 1'd0;
    csrbank4_en0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank4_en0_re <= interface4_bank_bus_we;
        csrbank4_en0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_update_value0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_update_value0_re <= 1'd0;
    csrbank4_update_value0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank4_update_value0_re <= interface4_bank_bus_we;
        csrbank4_update_value0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_value_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank4_value_re <= 1'd0;
    csrbank4_value_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank4_value_re <= interface4_bank_bus_we;
        csrbank4_value_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_ev_status_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_ev_status_re <= 1'd0;
    csrbank4_ev_status_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank4_ev_status_re <= interface4_bank_bus_we;
        csrbank4_ev_status_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_ev_pending_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_ev_pending_re <= 1'd0;
    csrbank4_ev_pending_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank4_ev_pending_re <= interface4_bank_bus_we;
        csrbank4_ev_pending_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_ev_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
    csrbank4_ev_enable0_re <= 1'd0;
    csrbank4_ev_enable0_we <= 1'd0;
    if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank4_ev_enable0_re <= interface4_bank_bus_we;
        csrbank4_ev_enable0_we <= (~interface4_bank_bus_we);
    end
end
assign csrbank4_load0_w = basesoc_timer_load_storage[31:0];
assign csrbank4_reload0_w = basesoc_timer_reload_storage[31:0];
assign csrbank4_en0_w = basesoc_timer_en_storage;
assign csrbank4_update_value0_w = basesoc_timer_update_value_storage;
assign csrbank4_value_w = basesoc_timer_value_status[31:0];
assign basesoc_timer_value_we = csrbank4_value_we;
always @(*) begin
    basesoc_timer_status_status <= 1'd0;
    basesoc_timer_status_status <= basesoc_timer_zero0;
end
assign csrbank4_ev_status_w = basesoc_timer_status_status;
assign basesoc_timer_status_we = csrbank4_ev_status_we;
always @(*) begin
    basesoc_timer_pending_status <= 1'd0;
    basesoc_timer_pending_status <= basesoc_timer_zero1;
end
assign csrbank4_ev_pending_w = basesoc_timer_pending_status;
assign basesoc_timer_pending_we = csrbank4_ev_pending_we;
assign basesoc_timer_zero2 = basesoc_timer_enable_storage;
assign csrbank4_ev_enable0_w = basesoc_timer_enable_storage;
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 2'd2);
assign basesoc_uart_rxtx_r = interface5_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_uart_rxtx_re <= 1'd0;
    basesoc_uart_rxtx_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_uart_rxtx_re <= interface5_bank_bus_we;
        basesoc_uart_rxtx_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_txfull_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_txfull_re <= 1'd0;
    csrbank5_txfull_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank5_txfull_re <= interface5_bank_bus_we;
        csrbank5_txfull_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_rxempty_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_rxempty_re <= 1'd0;
    csrbank5_rxempty_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank5_rxempty_re <= interface5_bank_bus_we;
        csrbank5_rxempty_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_ev_status_r = interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank5_ev_status_re <= 1'd0;
    csrbank5_ev_status_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank5_ev_status_re <= interface5_bank_bus_we;
        csrbank5_ev_status_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_ev_pending_r = interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank5_ev_pending_re <= 1'd0;
    csrbank5_ev_pending_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank5_ev_pending_re <= interface5_bank_bus_we;
        csrbank5_ev_pending_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_ev_enable0_r = interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank5_ev_enable0_re <= 1'd0;
    csrbank5_ev_enable0_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank5_ev_enable0_re <= interface5_bank_bus_we;
        csrbank5_ev_enable0_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_txempty_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_txempty_re <= 1'd0;
    csrbank5_txempty_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank5_txempty_re <= interface5_bank_bus_we;
        csrbank5_txempty_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_rxfull_r = interface5_bank_bus_dat_w[0];
always @(*) begin
    csrbank5_rxfull_re <= 1'd0;
    csrbank5_rxfull_we <= 1'd0;
    if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank5_rxfull_re <= interface5_bank_bus_we;
        csrbank5_rxfull_we <= (~interface5_bank_bus_we);
    end
end
assign csrbank5_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csrbank5_txfull_we;
assign csrbank5_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csrbank5_rxempty_we;
always @(*) begin
    basesoc_uart_status_status <= 2'd0;
    basesoc_uart_status_status[0] <= basesoc_uart_tx0;
    basesoc_uart_status_status[1] <= basesoc_uart_rx0;
end
assign csrbank5_ev_status_w = basesoc_uart_status_status[1:0];
assign basesoc_uart_status_we = csrbank5_ev_status_we;
always @(*) begin
    basesoc_uart_pending_status <= 2'd0;
    basesoc_uart_pending_status[0] <= basesoc_uart_tx1;
    basesoc_uart_pending_status[1] <= basesoc_uart_rx1;
end
assign csrbank5_ev_pending_w = basesoc_uart_pending_status[1:0];
assign basesoc_uart_pending_we = csrbank5_ev_pending_we;
assign basesoc_uart_tx2 = basesoc_uart_enable_storage[0];
assign basesoc_uart_rx2 = basesoc_uart_enable_storage[1];
assign csrbank5_ev_enable0_w = basesoc_uart_enable_storage[1:0];
assign csrbank5_txempty_w = basesoc_uart_txempty_status;
assign basesoc_uart_txempty_we = csrbank5_txempty_we;
assign csrbank5_rxfull_w = basesoc_uart_rxfull_status;
assign basesoc_uart_rxfull_we = csrbank5_rxfull_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface0_sram_bus_adr = csr_interconnect_adr;
assign interface1_sram_bus_adr = csr_interconnect_adr;
assign interface2_sram_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface0_sram_bus_we = csr_interconnect_we;
assign interface1_sram_bus_we = csr_interconnect_we;
assign interface2_sram_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface0_sram_bus_dat_w = csr_interconnect_dat_w;
assign interface1_sram_bus_dat_w = csr_interconnect_dat_w;
assign interface2_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface0_sram_bus_dat_r) | interface1_sram_bus_dat_r) | interface2_sram_bus_dat_r);
assign slice_proxy0 = aw_payload_addr[31:2];
assign slice_proxy1 = ar_payload_addr[31:2];
assign slice_proxy2 = aw_payload_addr[31:2];
assign slice_proxy3 = ar_payload_addr[31:2];
assign slice_proxy4 = aw_payload_addr[31:2];
assign slice_proxy5 = ar_payload_addr[31:2];
always @(*) begin
    array_muxed0 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed0 <= basesoc_master_aw_valid;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed1 <= basesoc_master_aw_first;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed2 <= basesoc_master_aw_last;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 32'd0;
    case (rr_write_grant)
        default: begin
            array_muxed3 <= basesoc_master_aw_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 2'd0;
    case (rr_write_grant)
        default: begin
            array_muxed4 <= basesoc_master_aw_payload_burst;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 8'd0;
    case (rr_write_grant)
        default: begin
            array_muxed5 <= basesoc_master_aw_payload_len;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (rr_write_grant)
        default: begin
            array_muxed6 <= basesoc_master_aw_payload_size;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed7 <= basesoc_master_aw_payload_lock;
        end
    endcase
end
always @(*) begin
    array_muxed8 <= 3'd0;
    case (rr_write_grant)
        default: begin
            array_muxed8 <= basesoc_master_aw_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed9 <= 4'd0;
    case (rr_write_grant)
        default: begin
            array_muxed9 <= basesoc_master_aw_payload_cache;
        end
    endcase
end
always @(*) begin
    array_muxed10 <= 4'd0;
    case (rr_write_grant)
        default: begin
            array_muxed10 <= basesoc_master_aw_payload_qos;
        end
    endcase
end
always @(*) begin
    array_muxed11 <= 4'd0;
    case (rr_write_grant)
        default: begin
            array_muxed11 <= basesoc_master_aw_payload_region;
        end
    endcase
end
always @(*) begin
    array_muxed12 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed12 <= basesoc_master_aw_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed13 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed13 <= basesoc_master_aw_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed14 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed14 <= basesoc_master_aw_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed15 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed15 <= basesoc_master_w_valid;
        end
    endcase
end
always @(*) begin
    array_muxed16 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed16 <= basesoc_master_w_first;
        end
    endcase
end
always @(*) begin
    array_muxed17 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed17 <= basesoc_master_w_last;
        end
    endcase
end
always @(*) begin
    array_muxed18 <= 32'd0;
    case (rr_write_grant)
        default: begin
            array_muxed18 <= basesoc_master_w_payload_data;
        end
    endcase
end
always @(*) begin
    array_muxed19 <= 4'd0;
    case (rr_write_grant)
        default: begin
            array_muxed19 <= basesoc_master_w_payload_strb;
        end
    endcase
end
always @(*) begin
    array_muxed20 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed20 <= basesoc_master_w_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed21 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed21 <= basesoc_master_w_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed22 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed22 <= basesoc_master_w_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed23 <= 1'd0;
    case (rr_write_grant)
        default: begin
            array_muxed23 <= basesoc_master_b_ready;
        end
    endcase
end
always @(*) begin
    array_muxed24 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed24 <= basesoc_master_ar_valid;
        end
    endcase
end
always @(*) begin
    array_muxed25 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed25 <= basesoc_master_ar_first;
        end
    endcase
end
always @(*) begin
    array_muxed26 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed26 <= basesoc_master_ar_last;
        end
    endcase
end
always @(*) begin
    array_muxed27 <= 32'd0;
    case (rr_read_grant)
        default: begin
            array_muxed27 <= basesoc_master_ar_payload_addr;
        end
    endcase
end
always @(*) begin
    array_muxed28 <= 2'd0;
    case (rr_read_grant)
        default: begin
            array_muxed28 <= basesoc_master_ar_payload_burst;
        end
    endcase
end
always @(*) begin
    array_muxed29 <= 8'd0;
    case (rr_read_grant)
        default: begin
            array_muxed29 <= basesoc_master_ar_payload_len;
        end
    endcase
end
always @(*) begin
    array_muxed30 <= 3'd0;
    case (rr_read_grant)
        default: begin
            array_muxed30 <= basesoc_master_ar_payload_size;
        end
    endcase
end
always @(*) begin
    array_muxed31 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed31 <= basesoc_master_ar_payload_lock;
        end
    endcase
end
always @(*) begin
    array_muxed32 <= 3'd0;
    case (rr_read_grant)
        default: begin
            array_muxed32 <= basesoc_master_ar_payload_prot;
        end
    endcase
end
always @(*) begin
    array_muxed33 <= 4'd0;
    case (rr_read_grant)
        default: begin
            array_muxed33 <= basesoc_master_ar_payload_cache;
        end
    endcase
end
always @(*) begin
    array_muxed34 <= 4'd0;
    case (rr_read_grant)
        default: begin
            array_muxed34 <= basesoc_master_ar_payload_qos;
        end
    endcase
end
always @(*) begin
    array_muxed35 <= 4'd0;
    case (rr_read_grant)
        default: begin
            array_muxed35 <= basesoc_master_ar_payload_region;
        end
    endcase
end
always @(*) begin
    array_muxed36 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed36 <= basesoc_master_ar_param_id;
        end
    endcase
end
always @(*) begin
    array_muxed37 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed37 <= basesoc_master_ar_param_dest;
        end
    endcase
end
always @(*) begin
    array_muxed38 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed38 <= basesoc_master_ar_param_user;
        end
    endcase
end
always @(*) begin
    array_muxed39 <= 1'd0;
    case (rr_read_grant)
        default: begin
            array_muxed39 <= basesoc_master_r_ready;
        end
    endcase
end
assign basesoc_rx_rx = regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge debug_por_clk) begin
    basesoc_debug_reset <= 1'd0;
    basesoc_debug_ndmreset_last <= basesoc_debug_ndmreset;
    if (debug_por_rst) begin
        basesoc_debug_reset <= 1'd1;
        basesoc_debug_ndmreset_last <= 1'd0;
    end
end

always @(posedge sys_clk) begin
    if (((~basesoc_basesoc_socbushandler_pipe_valid_source_valid) | basesoc_basesoc_socbushandler_pipe_valid_source_ready)) begin
        basesoc_basesoc_socbushandler_pipe_valid_source_valid <= basesoc_basesoc_socbushandler_pipe_valid_sink_valid;
        basesoc_basesoc_socbushandler_pipe_valid_source_first <= basesoc_basesoc_socbushandler_pipe_valid_sink_first;
        basesoc_basesoc_socbushandler_pipe_valid_source_last <= basesoc_basesoc_socbushandler_pipe_valid_sink_last;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_addr;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_burst;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_len <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_len;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_size <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_size;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_lock;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_prot;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_cache;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_qos;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_region <= basesoc_basesoc_socbushandler_pipe_valid_sink_payload_region;
        basesoc_basesoc_socbushandler_pipe_valid_source_param_id <= basesoc_basesoc_socbushandler_pipe_valid_sink_param_id;
        basesoc_basesoc_socbushandler_pipe_valid_source_param_dest <= basesoc_basesoc_socbushandler_pipe_valid_sink_param_dest;
        basesoc_basesoc_socbushandler_pipe_valid_source_param_user <= basesoc_basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((basesoc_basesoc_socbushandler_ax_beat_valid & basesoc_basesoc_socbushandler_ax_beat_ready)) begin
        if (basesoc_basesoc_socbushandler_ax_beat_last) begin
            basesoc_basesoc_socbushandler_beat_count <= 1'd0;
            basesoc_basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            basesoc_basesoc_socbushandler_beat_count <= (basesoc_basesoc_socbushandler_beat_count + 1'd1);
            if ((((basesoc_basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((basesoc_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                basesoc_basesoc_socbushandler_beat_offset <= (basesoc_basesoc_socbushandler_beat_offset + $signed({1'd0, basesoc_basesoc_socbushandler_beat_size}));
            end
        end
        if (((basesoc_basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((basesoc_basesoc_socbushandler_ax_beat_payload_addr & basesoc_basesoc_socbushandler_beat_wrap) == basesoc_basesoc_socbushandler_beat_wrap)) begin
                basesoc_basesoc_socbushandler_beat_offset <= (basesoc_basesoc_socbushandler_beat_offset - $signed({1'd0, basesoc_basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    axi2axilite0_state <= axi2axilite0_next_state;
    if (basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value_ce0) begin
        basesoc_basesoc_socbushandler_cmd_done <= basesoc_basesoc_socbushandler_cmd_done_axi2axilite0_next_value0;
    end
    if (basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value_ce1) begin
        basesoc_basesoc_socbushandler_last_ar_aw_n <= basesoc_basesoc_socbushandler_last_ar_aw_n_axi2axilite0_next_value1;
    end
    if (((~basesoc_slave_pipe_valid_source_valid) | basesoc_slave_pipe_valid_source_ready)) begin
        basesoc_slave_pipe_valid_source_valid <= basesoc_slave_pipe_valid_sink_valid;
        basesoc_slave_pipe_valid_source_first <= basesoc_slave_pipe_valid_sink_first;
        basesoc_slave_pipe_valid_source_last <= basesoc_slave_pipe_valid_sink_last;
        basesoc_slave_pipe_valid_source_payload_addr <= basesoc_slave_pipe_valid_sink_payload_addr;
        basesoc_slave_pipe_valid_source_payload_burst <= basesoc_slave_pipe_valid_sink_payload_burst;
        basesoc_slave_pipe_valid_source_payload_len <= basesoc_slave_pipe_valid_sink_payload_len;
        basesoc_slave_pipe_valid_source_payload_size <= basesoc_slave_pipe_valid_sink_payload_size;
        basesoc_slave_pipe_valid_source_payload_lock <= basesoc_slave_pipe_valid_sink_payload_lock;
        basesoc_slave_pipe_valid_source_payload_prot <= basesoc_slave_pipe_valid_sink_payload_prot;
        basesoc_slave_pipe_valid_source_payload_cache <= basesoc_slave_pipe_valid_sink_payload_cache;
        basesoc_slave_pipe_valid_source_payload_qos <= basesoc_slave_pipe_valid_sink_payload_qos;
        basesoc_slave_pipe_valid_source_payload_region <= basesoc_slave_pipe_valid_sink_payload_region;
        basesoc_slave_pipe_valid_source_param_id <= basesoc_slave_pipe_valid_sink_param_id;
        basesoc_slave_pipe_valid_source_param_dest <= basesoc_slave_pipe_valid_sink_param_dest;
        basesoc_slave_pipe_valid_source_param_user <= basesoc_slave_pipe_valid_sink_param_user;
    end
    if ((basesoc_slave_ax_beat_valid & basesoc_slave_ax_beat_ready)) begin
        if (basesoc_slave_ax_beat_last) begin
            basesoc_slave_beat_count <= 1'd0;
            basesoc_slave_beat_offset <= 1'd0;
        end else begin
            basesoc_slave_beat_count <= (basesoc_slave_beat_count + 1'd1);
            if ((((basesoc_slave_source_source_payload_burst == 1'd1) & 1'd1) | ((basesoc_slave_source_source_payload_burst == 2'd2) & 1'd1))) begin
                basesoc_slave_beat_offset <= (basesoc_slave_beat_offset + $signed({1'd0, basesoc_slave_beat_size}));
            end
        end
        if (((basesoc_slave_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((basesoc_slave_ax_beat_payload_addr & basesoc_slave_beat_wrap) == basesoc_slave_beat_wrap)) begin
                basesoc_slave_beat_offset <= (basesoc_slave_beat_offset - $signed({1'd0, basesoc_slave_beat_wrap}));
            end
        end
    end
    axi2axilite1_state <= axi2axilite1_next_state;
    if (basesoc_slave_cmd_done_axi2axilite1_next_value_ce0) begin
        basesoc_slave_cmd_done <= basesoc_slave_cmd_done_axi2axilite1_next_value0;
    end
    if (basesoc_slave_last_ar_aw_n_axi2axilite1_next_value_ce1) begin
        basesoc_slave_last_ar_aw_n <= basesoc_slave_last_ar_aw_n_axi2axilite1_next_value1;
    end
    if (((~basesoc_socbushandler_pipe_valid_source_valid) | basesoc_socbushandler_pipe_valid_source_ready)) begin
        basesoc_socbushandler_pipe_valid_source_valid <= basesoc_socbushandler_pipe_valid_sink_valid;
        basesoc_socbushandler_pipe_valid_source_first <= basesoc_socbushandler_pipe_valid_sink_first;
        basesoc_socbushandler_pipe_valid_source_last <= basesoc_socbushandler_pipe_valid_sink_last;
        basesoc_socbushandler_pipe_valid_source_payload_addr <= basesoc_socbushandler_pipe_valid_sink_payload_addr;
        basesoc_socbushandler_pipe_valid_source_payload_burst <= basesoc_socbushandler_pipe_valid_sink_payload_burst;
        basesoc_socbushandler_pipe_valid_source_payload_len <= basesoc_socbushandler_pipe_valid_sink_payload_len;
        basesoc_socbushandler_pipe_valid_source_payload_size <= basesoc_socbushandler_pipe_valid_sink_payload_size;
        basesoc_socbushandler_pipe_valid_source_payload_lock <= basesoc_socbushandler_pipe_valid_sink_payload_lock;
        basesoc_socbushandler_pipe_valid_source_payload_prot <= basesoc_socbushandler_pipe_valid_sink_payload_prot;
        basesoc_socbushandler_pipe_valid_source_payload_cache <= basesoc_socbushandler_pipe_valid_sink_payload_cache;
        basesoc_socbushandler_pipe_valid_source_payload_qos <= basesoc_socbushandler_pipe_valid_sink_payload_qos;
        basesoc_socbushandler_pipe_valid_source_payload_region <= basesoc_socbushandler_pipe_valid_sink_payload_region;
        basesoc_socbushandler_pipe_valid_source_param_id <= basesoc_socbushandler_pipe_valid_sink_param_id;
        basesoc_socbushandler_pipe_valid_source_param_dest <= basesoc_socbushandler_pipe_valid_sink_param_dest;
        basesoc_socbushandler_pipe_valid_source_param_user <= basesoc_socbushandler_pipe_valid_sink_param_user;
    end
    if ((basesoc_socbushandler_ax_beat_valid & basesoc_socbushandler_ax_beat_ready)) begin
        if (basesoc_socbushandler_ax_beat_last) begin
            basesoc_socbushandler_beat_count <= 1'd0;
            basesoc_socbushandler_beat_offset <= 1'd0;
        end else begin
            basesoc_socbushandler_beat_count <= (basesoc_socbushandler_beat_count + 1'd1);
            if ((((basesoc_socbushandler_source_source_payload_burst == 1'd1) & 1'd1) | ((basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1))) begin
                basesoc_socbushandler_beat_offset <= (basesoc_socbushandler_beat_offset + $signed({1'd0, basesoc_socbushandler_beat_size}));
            end
        end
        if (((basesoc_socbushandler_source_source_payload_burst == 2'd2) & 1'd1)) begin
            if (((basesoc_socbushandler_ax_beat_payload_addr & basesoc_socbushandler_beat_wrap) == basesoc_socbushandler_beat_wrap)) begin
                basesoc_socbushandler_beat_offset <= (basesoc_socbushandler_beat_offset - $signed({1'd0, basesoc_socbushandler_beat_wrap}));
            end
        end
    end
    axi2axilite2_state <= axi2axilite2_next_state;
    if (basesoc_socbushandler_cmd_done_axi2axilite2_next_value_ce0) begin
        basesoc_socbushandler_cmd_done <= basesoc_socbushandler_cmd_done_axi2axilite2_next_value0;
    end
    if (basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value_ce1) begin
        basesoc_socbushandler_last_ar_aw_n <= basesoc_socbushandler_last_ar_aw_n_axi2axilite2_next_value1;
    end
    if (((aw_valid & aw_ready) & (b_valid & b_ready))) begin
        wr_lock_counter <= wr_lock_counter;
    end else begin
        if (((aw_valid & aw_ready) & (~wr_lock_full))) begin
            wr_lock_counter <= (wr_lock_counter + 1'd1);
        end else begin
            if (((b_valid & b_ready) & (~wr_lock_empty))) begin
                wr_lock_counter <= (wr_lock_counter - 1'd1);
            end
        end
    end
    if (((ar_valid & ar_ready) & ((r_valid & r_ready) & r_last))) begin
        rd_lock_counter <= rd_lock_counter;
    end else begin
        if (((ar_valid & ar_ready) & (~rd_lock_full))) begin
            rd_lock_counter <= (rd_lock_counter + 1'd1);
        end else begin
            if ((((r_valid & r_ready) & r_last) & (~rd_lock_empty))) begin
                rd_lock_counter <= (rd_lock_counter - 1'd1);
            end
        end
    end
    if (axirequestcounter0_empty) begin
        slave_sel_reg0 <= slave_sel_dec0;
    end
    if (axirequestcounter1_empty) begin
        slave_sel_reg1 <= slave_sel_dec1;
    end
    if (((aw_valid & aw_ready) & (b_valid & b_ready))) begin
        axirequestcounter0_counter <= axirequestcounter0_counter;
    end else begin
        if (((aw_valid & aw_ready) & (~axirequestcounter0_full))) begin
            axirequestcounter0_counter <= (axirequestcounter0_counter + 1'd1);
        end else begin
            if (((b_valid & b_ready) & (~axirequestcounter0_empty))) begin
                axirequestcounter0_counter <= (axirequestcounter0_counter - 1'd1);
            end
        end
    end
    if (((ar_valid & ar_ready) & ((r_valid & r_ready) & r_last))) begin
        axirequestcounter1_counter <= axirequestcounter1_counter;
    end else begin
        if (((ar_valid & ar_ready) & (~axirequestcounter1_full))) begin
            axirequestcounter1_counter <= (axirequestcounter1_counter + 1'd1);
        end else begin
            if ((((r_valid & r_ready) & r_last) & (~axirequestcounter1_empty))) begin
                axirequestcounter1_counter <= (axirequestcounter1_counter - 1'd1);
            end
        end
    end
    if (wr_timer_wait) begin
        if ((~wr_timer_done)) begin
            wr_timer_count <= (wr_timer_count - 1'd1);
        end
    end else begin
        wr_timer_count <= 20'd1000000;
    end
    if (rd_timer_wait) begin
        if ((~rd_timer_done)) begin
            rd_timer_count <= (rd_timer_count - 1'd1);
        end
    end else begin
        rd_timer_count <= 20'd1000000;
    end
    fsm0_state <= fsm0_next_state;
    fsm1_state <= fsm1_next_state;
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_axilitesram0_state <= basesoc_axilitesram0_next_state;
    if (basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value_ce0) begin
        basesoc_basesoc_port_dat_r_latched <= basesoc_basesoc_port_dat_r_latched_axilitesram0_next_value0;
    end
    if (basesoc_basesoc_last_was_read_axilitesram0_next_value_ce1) begin
        basesoc_basesoc_last_was_read <= basesoc_basesoc_last_was_read_axilitesram0_next_value1;
    end
    basesoc_axilitesram1_state <= basesoc_axilitesram1_next_state;
    if (basesoc_ram_port_dat_r_latched_axilitesram1_next_value_ce0) begin
        basesoc_ram_port_dat_r_latched <= basesoc_ram_port_dat_r_latched_axilitesram1_next_value0;
    end
    if (basesoc_ram_last_was_read_axilitesram1_next_value_ce1) begin
        basesoc_ram_last_was_read <= basesoc_ram_last_was_read_axilitesram1_next_value1;
    end
    {basesoc_tx_tick, basesoc_tx_phase} <= 24'd9895604;
    if (basesoc_tx_enable) begin
        {basesoc_tx_tick, basesoc_tx_phase} <= (basesoc_tx_phase + 24'd9895604);
    end
    basesoc_rs232phytx_state <= basesoc_rs232phytx_next_state;
    if (basesoc_tx_count_rs232phytx_next_value_ce0) begin
        basesoc_tx_count <= basesoc_tx_count_rs232phytx_next_value0;
    end
    if (basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (basesoc_tx_data_rs232phytx_next_value_ce2) begin
        basesoc_tx_data <= basesoc_tx_data_rs232phytx_next_value2;
    end
    basesoc_rx_rx_d <= basesoc_rx_rx;
    {basesoc_rx_tick, basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_rx_enable) begin
        {basesoc_rx_tick, basesoc_rx_phase} <= (basesoc_rx_phase + 24'd9895604);
    end
    basesoc_rs232phyrx_state <= basesoc_rs232phyrx_next_state;
    if (basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        basesoc_rx_count <= basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        basesoc_rx_data <= basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (basesoc_uart_tx_clear) begin
        basesoc_uart_tx_pending <= 1'd0;
    end
    basesoc_uart_tx_trigger_d <= basesoc_uart_tx_trigger;
    if ((basesoc_uart_tx_trigger & (~basesoc_uart_tx_trigger_d))) begin
        basesoc_uart_tx_pending <= 1'd1;
    end
    if (basesoc_uart_rx_clear) begin
        basesoc_uart_rx_pending <= 1'd0;
    end
    basesoc_uart_rx_trigger_d <= basesoc_uart_rx_trigger;
    if ((basesoc_uart_rx_trigger & (~basesoc_uart_rx_trigger_d))) begin
        basesoc_uart_rx_pending <= 1'd1;
    end
    if (basesoc_uart_tx_fifo_syncfifo_re) begin
        basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_tx_fifo_re) begin
            basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_tx_fifo_do_read) begin
        basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        if ((~basesoc_uart_tx_fifo_do_read)) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_tx_fifo_do_read) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_uart_rx_fifo_syncfifo_re) begin
        basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_rx_fifo_re) begin
            basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_rx_fifo_do_read) begin
        basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        if ((~basesoc_uart_rx_fifo_do_read)) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_rx_fifo_do_read) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_timer_en_storage) begin
        if ((basesoc_timer_value == 1'd0)) begin
            basesoc_timer_value <= basesoc_timer_reload_storage;
        end else begin
            basesoc_timer_value <= (basesoc_timer_value - 1'd1);
        end
    end else begin
        basesoc_timer_value <= basesoc_timer_load_storage;
    end
    if (basesoc_timer_update_value_re) begin
        basesoc_timer_value_status <= basesoc_timer_value;
    end
    if (basesoc_timer_zero_clear) begin
        basesoc_timer_zero_pending <= 1'd0;
    end
    basesoc_timer_zero_trigger_d <= basesoc_timer_zero_trigger;
    if ((basesoc_timer_zero_trigger & (~basesoc_timer_zero_trigger_d))) begin
        basesoc_timer_zero_pending <= 1'd1;
    end
    if (done) begin
        chaser <= {chaser, (~chaser[2])};
    end
    if (re) begin
        mode <= 1'd1;
    end
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 23'd8333333;
    end
    basesoc_axilite2csr_state <= basesoc_axilite2csr_next_state;
    if (basesoc_port_dat_r_latched_axilite2csr_next_value_ce0) begin
        basesoc_port_dat_r_latched <= basesoc_port_dat_r_latched_axilite2csr_next_value0;
    end
    if (basesoc_last_was_read_axilite2csr_next_value_ce1) begin
        basesoc_last_was_read <= basesoc_last_was_read_axilite2csr_next_value1;
    end
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_reset0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
            end
            2'd2: begin
                interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csrbank0_reset0_re) begin
        basesoc_reset_storage[1:0] <= csrbank0_reset0_r;
    end
    basesoc_reset_re <= csrbank0_reset0_re;
    if (csrbank0_scratch0_re) begin
        basesoc_scratch_storage[31:0] <= csrbank0_scratch0_r;
    end
    basesoc_scratch_re <= csrbank0_scratch0_re;
    basesoc_bus_errors_re <= csrbank0_bus_errors_re;
    sram0_sel_r <= sram0_sel;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_out0_w;
            end
        endcase
    end
    if (csrbank1_out0_re) begin
        storage[2:0] <= csrbank1_out0_r;
    end
    re <= csrbank1_out0_re;
    sram1_sel_r <= sram1_sel;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_rom_page0_w;
            end
        endcase
    end
    if (csrbank2_rom_page0_re) begin
        sram1_storage[5:0] <= csrbank2_rom_page0_r;
    end
    sram1_re <= csrbank2_rom_page0_re;
    sram2_sel_r <= sram2_sel;
    interface3_bank_bus_dat_r <= 1'd0;
    if (csrbank3_sel) begin
        case (interface3_bank_bus_adr[8:0])
            1'd0: begin
                interface3_bank_bus_dat_r <= csrbank3_sram_page0_w;
            end
        endcase
    end
    if (csrbank3_sram_page0_re) begin
        sram2_storage[4:0] <= csrbank3_sram_page0_r;
    end
    sram2_re <= csrbank3_sram_page0_re;
    interface4_bank_bus_dat_r <= 1'd0;
    if (csrbank4_sel) begin
        case (interface4_bank_bus_adr[8:0])
            1'd0: begin
                interface4_bank_bus_dat_r <= csrbank4_load0_w;
            end
            1'd1: begin
                interface4_bank_bus_dat_r <= csrbank4_reload0_w;
            end
            2'd2: begin
                interface4_bank_bus_dat_r <= csrbank4_en0_w;
            end
            2'd3: begin
                interface4_bank_bus_dat_r <= csrbank4_update_value0_w;
            end
            3'd4: begin
                interface4_bank_bus_dat_r <= csrbank4_value_w;
            end
            3'd5: begin
                interface4_bank_bus_dat_r <= csrbank4_ev_status_w;
            end
            3'd6: begin
                interface4_bank_bus_dat_r <= csrbank4_ev_pending_w;
            end
            3'd7: begin
                interface4_bank_bus_dat_r <= csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (csrbank4_load0_re) begin
        basesoc_timer_load_storage[31:0] <= csrbank4_load0_r;
    end
    basesoc_timer_load_re <= csrbank4_load0_re;
    if (csrbank4_reload0_re) begin
        basesoc_timer_reload_storage[31:0] <= csrbank4_reload0_r;
    end
    basesoc_timer_reload_re <= csrbank4_reload0_re;
    if (csrbank4_en0_re) begin
        basesoc_timer_en_storage <= csrbank4_en0_r;
    end
    basesoc_timer_en_re <= csrbank4_en0_re;
    if (csrbank4_update_value0_re) begin
        basesoc_timer_update_value_storage <= csrbank4_update_value0_r;
    end
    basesoc_timer_update_value_re <= csrbank4_update_value0_re;
    basesoc_timer_value_re <= csrbank4_value_re;
    basesoc_timer_status_re <= csrbank4_ev_status_re;
    if (csrbank4_ev_pending_re) begin
        basesoc_timer_pending_r <= csrbank4_ev_pending_r;
    end
    basesoc_timer_pending_re <= csrbank4_ev_pending_re;
    if (csrbank4_ev_enable0_re) begin
        basesoc_timer_enable_storage <= csrbank4_ev_enable0_r;
    end
    basesoc_timer_enable_re <= csrbank4_ev_enable0_re;
    interface5_bank_bus_dat_r <= 1'd0;
    if (csrbank5_sel) begin
        case (interface5_bank_bus_adr[8:0])
            1'd0: begin
                interface5_bank_bus_dat_r <= basesoc_uart_rxtx_w;
            end
            1'd1: begin
                interface5_bank_bus_dat_r <= csrbank5_txfull_w;
            end
            2'd2: begin
                interface5_bank_bus_dat_r <= csrbank5_rxempty_w;
            end
            2'd3: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_status_w;
            end
            3'd4: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_pending_w;
            end
            3'd5: begin
                interface5_bank_bus_dat_r <= csrbank5_ev_enable0_w;
            end
            3'd6: begin
                interface5_bank_bus_dat_r <= csrbank5_txempty_w;
            end
            3'd7: begin
                interface5_bank_bus_dat_r <= csrbank5_rxfull_w;
            end
        endcase
    end
    basesoc_uart_txfull_re <= csrbank5_txfull_re;
    basesoc_uart_rxempty_re <= csrbank5_rxempty_re;
    basesoc_uart_status_re <= csrbank5_ev_status_re;
    if (csrbank5_ev_pending_re) begin
        basesoc_uart_pending_r[1:0] <= csrbank5_ev_pending_r;
    end
    basesoc_uart_pending_re <= csrbank5_ev_pending_re;
    if (csrbank5_ev_enable0_re) begin
        basesoc_uart_enable_storage[1:0] <= csrbank5_ev_enable0_r;
    end
    basesoc_uart_enable_re <= csrbank5_ev_enable0_re;
    basesoc_uart_txempty_re <= csrbank5_txempty_re;
    basesoc_uart_rxfull_re <= csrbank5_rxfull_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_basesoc_last_was_read <= 1'd0;
        basesoc_basesoc_port_dat_r_latched <= 32'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        basesoc_basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        basesoc_basesoc_socbushandler_beat_count <= 8'd0;
        basesoc_basesoc_socbushandler_beat_offset <= 13'd0;
        basesoc_basesoc_socbushandler_cmd_done <= 1'd0;
        basesoc_basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        basesoc_ram_last_was_read <= 1'd0;
        basesoc_ram_port_dat_r_latched <= 32'd0;
        basesoc_slave_pipe_valid_source_valid <= 1'd0;
        basesoc_slave_pipe_valid_source_payload_addr <= 32'd0;
        basesoc_slave_pipe_valid_source_payload_burst <= 2'd0;
        basesoc_slave_pipe_valid_source_payload_len <= 8'd0;
        basesoc_slave_pipe_valid_source_payload_size <= 3'd0;
        basesoc_slave_pipe_valid_source_payload_lock <= 1'd0;
        basesoc_slave_pipe_valid_source_payload_prot <= 3'd0;
        basesoc_slave_pipe_valid_source_payload_cache <= 4'd0;
        basesoc_slave_pipe_valid_source_payload_qos <= 4'd0;
        basesoc_slave_pipe_valid_source_payload_region <= 4'd0;
        basesoc_slave_beat_count <= 8'd0;
        basesoc_slave_beat_offset <= 13'd0;
        basesoc_slave_cmd_done <= 1'd0;
        basesoc_slave_last_ar_aw_n <= 1'd0;
        serial_tx <= 1'd1;
        basesoc_tx_tick <= 1'd0;
        basesoc_rx_tick <= 1'd0;
        basesoc_rx_rx_d <= 1'd0;
        basesoc_uart_txfull_re <= 1'd0;
        basesoc_uart_rxempty_re <= 1'd0;
        basesoc_uart_tx_pending <= 1'd0;
        basesoc_uart_tx_trigger_d <= 1'd0;
        basesoc_uart_rx_pending <= 1'd0;
        basesoc_uart_rx_trigger_d <= 1'd0;
        basesoc_uart_status_re <= 1'd0;
        basesoc_uart_pending_re <= 1'd0;
        basesoc_uart_pending_r <= 2'd0;
        basesoc_uart_enable_storage <= 2'd0;
        basesoc_uart_enable_re <= 1'd0;
        basesoc_uart_txempty_re <= 1'd0;
        basesoc_uart_rxfull_re <= 1'd0;
        basesoc_uart_tx_fifo_readable <= 1'd0;
        basesoc_uart_tx_fifo_level0 <= 5'd0;
        basesoc_uart_tx_fifo_produce <= 4'd0;
        basesoc_uart_tx_fifo_consume <= 4'd0;
        basesoc_uart_rx_fifo_readable <= 1'd0;
        basesoc_uart_rx_fifo_level0 <= 5'd0;
        basesoc_uart_rx_fifo_produce <= 4'd0;
        basesoc_uart_rx_fifo_consume <= 4'd0;
        basesoc_timer_load_storage <= 32'd0;
        basesoc_timer_load_re <= 1'd0;
        basesoc_timer_reload_storage <= 32'd0;
        basesoc_timer_reload_re <= 1'd0;
        basesoc_timer_en_storage <= 1'd0;
        basesoc_timer_en_re <= 1'd0;
        basesoc_timer_update_value_storage <= 1'd0;
        basesoc_timer_update_value_re <= 1'd0;
        basesoc_timer_value_status <= 32'd0;
        basesoc_timer_value_re <= 1'd0;
        basesoc_timer_zero_pending <= 1'd0;
        basesoc_timer_zero_trigger_d <= 1'd0;
        basesoc_timer_status_re <= 1'd0;
        basesoc_timer_pending_re <= 1'd0;
        basesoc_timer_pending_r <= 1'd0;
        basesoc_timer_enable_storage <= 1'd0;
        basesoc_timer_enable_re <= 1'd0;
        basesoc_timer_value <= 32'd0;
        storage <= 3'd0;
        re <= 1'd0;
        chaser <= 3'd0;
        mode <= 1'd0;
        count <= 23'd8333333;
        basesoc_last_was_read <= 1'd0;
        basesoc_port_dat_r_latched <= 32'd0;
        basesoc_socbushandler_pipe_valid_source_valid <= 1'd0;
        basesoc_socbushandler_pipe_valid_source_payload_addr <= 32'd0;
        basesoc_socbushandler_pipe_valid_source_payload_burst <= 2'd0;
        basesoc_socbushandler_pipe_valid_source_payload_len <= 8'd0;
        basesoc_socbushandler_pipe_valid_source_payload_size <= 3'd0;
        basesoc_socbushandler_pipe_valid_source_payload_lock <= 1'd0;
        basesoc_socbushandler_pipe_valid_source_payload_prot <= 3'd0;
        basesoc_socbushandler_pipe_valid_source_payload_cache <= 4'd0;
        basesoc_socbushandler_pipe_valid_source_payload_qos <= 4'd0;
        basesoc_socbushandler_pipe_valid_source_payload_region <= 4'd0;
        basesoc_socbushandler_beat_count <= 8'd0;
        basesoc_socbushandler_beat_offset <= 13'd0;
        basesoc_socbushandler_cmd_done <= 1'd0;
        basesoc_socbushandler_last_ar_aw_n <= 1'd0;
        axi2axilite0_state <= 2'd0;
        axi2axilite1_state <= 2'd0;
        axi2axilite2_state <= 2'd0;
        wr_lock_counter <= 8'd0;
        rd_lock_counter <= 8'd0;
        slave_sel_reg0 <= 3'd0;
        slave_sel_reg1 <= 3'd0;
        axirequestcounter0_counter <= 8'd0;
        axirequestcounter1_counter <= 8'd0;
        wr_timer_count <= 20'd1000000;
        rd_timer_count <= 20'd1000000;
        fsm0_state <= 1'd0;
        fsm1_state <= 1'd0;
        sram0_sel_r <= 1'd0;
        sram1_storage <= 6'd0;
        sram1_re <= 1'd0;
        sram1_sel_r <= 1'd0;
        sram2_storage <= 5'd0;
        sram2_re <= 1'd0;
        sram2_sel_r <= 1'd0;
        basesoc_axilitesram0_state <= 2'd0;
        basesoc_axilitesram1_state <= 2'd0;
        basesoc_rs232phytx_state <= 1'd0;
        basesoc_rs232phyrx_state <= 1'd0;
        basesoc_axilite2csr_state <= 2'd0;
    end
    regs0 <= serial_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 4625-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
reg [31:0] rom[0:4624];
initial begin
	$readmemh("sipeed_tang_primer_rom.init", rom);
end
reg [31:0] rom_dat0;
reg [12:0] rom_adr1;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_adr];
end
always @(posedge sys_clk) begin
	if (sram1_we)
		rom[sram1_adr] <= sram1_dat_w;
	rom_adr1 <= sram1_adr;
end
assign basesoc_basesoc_dat_r = rom_dat0;
assign sram1_dat_r = rom[rom_adr1];


//------------------------------------------------------------------------------
// Memory sram: 16384-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 32 
reg [31:0] sram[0:16383];
initial begin
//	$readmemh("sipeed_tang_primer_sram.init", sram);//Dhrystone_DDR_Payload.mif
	$readmemh("Dhrystone_DDR_Payload.mif", sram);
end
reg [13:0] sram_adr0;
reg [13:0] sram_adr1;
always @(posedge sys_clk) begin
	if (basesoc_ram_we[0])
		sram[basesoc_ram_adr][7:0] <= basesoc_ram_dat_w[7:0];
	if (basesoc_ram_we[1])
		sram[basesoc_ram_adr][15:8] <= basesoc_ram_dat_w[15:8];
	if (basesoc_ram_we[2])
		sram[basesoc_ram_adr][23:16] <= basesoc_ram_dat_w[23:16];
	if (basesoc_ram_we[3])
		sram[basesoc_ram_adr][31:24] <= basesoc_ram_dat_w[31:24];
end
always @(posedge sys_clk) begin
	if (sram2_we)
	sram[sram2_adr] <= sram2_dat_w;
end
////++
always @(posedge sys_clk) begin
	sram_adr0 <= sram[basesoc_ram_adr];
    sram_adr1 <= sram[sram2_adr];
end
assign basesoc_ram_dat_r = sram_adr0;
assign sram2_dat_r = sram_adr1;
////++
//assign basesoc_ram_dat_r = sram[sram_adr0];
//assign sram2_dat_r = sram[sram_adr1];
/////////////
//reg [31:0] sram[0:16383];
//initial begin
//	$readmemh("sipeed_tang_primer_sram.init", sram);
//end
//reg [13:0] sram_adr0;
//reg [13:0] sram_adr1;
//always @(posedge sys_clk) begin
//	if (basesoc_ram_we[0])
//		sram[basesoc_ram_adr][7:0] <= basesoc_ram_dat_w[7:0];
//	if (basesoc_ram_we[1])
//		sram[basesoc_ram_adr][15:8] <= basesoc_ram_dat_w[15:8];
//	if (basesoc_ram_we[2])
//		sram[basesoc_ram_adr][23:16] <= basesoc_ram_dat_w[23:16];
//	if (basesoc_ram_we[3])
//		sram[basesoc_ram_adr][31:24] <= basesoc_ram_dat_w[31:24];
//	sram_adr0 <= basesoc_ram_adr;
//end
//always @(posedge sys_clk) begin
//	if (sram2_we)
//		sram[sram2_adr] <= sram2_dat_w;
//	sram_adr1 <= sram2_adr;
//end
//assign basesoc_ram_dat_r = sram[sram_adr0];
//assign sram2_dat_r = sram[sram_adr1];
/////////////

//------------------------------------------------------------------------------
// Memory mem: 45-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:44];
initial begin
	$readmemh("sipeed_tang_primer_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= sram0_adr;
end
assign sram0_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage_1[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_uart_tx_fifo_wrport_dat_r = storage_1_dat0;
assign basesoc_uart_tx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_2[0:15];
reg [9:0] storage_2_dat0;
reg [9:0] storage_2_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_2[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		storage_2_dat1 <= storage_2[basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_uart_rx_fifo_wrport_dat_r = storage_2_dat0;
assign basesoc_uart_rx_fifo_rdport_dat_r = storage_2_dat1;


//------------------------------------------------------------------------------
// Instance NaxRiscvLitex_f14ec82dfe550be1404f5a47637708ca of NaxRiscvLitex_f14ec82dfe550be1404f5a47637708ca Module.
//------------------------------------------------------------------------------
NaxRiscvLitex_f14ec82dfe550be1404f5a47637708ca NaxRiscvLitex_f14ec82dfe550be1404f5a47637708ca(
	// Inputs.
	.asyncReset                         ((sys_rst | basesoc_naxriscv_reset)),
	.debug_reset                        (basesoc_debug_reset),
	.jtag_tck                           (jtag_tck),
	.jtag_tdi                           (jtag_tdi),
	.jtag_tms                           (jtag_tms),
	.pBus_arready                       (basesoc_naxriscv_ar_ready),
	.pBus_awready                       (basesoc_naxriscv_aw_ready),
	.pBus_bresp                         (basesoc_naxriscv_b_payload_resp),
	.pBus_bvalid                        (basesoc_naxriscv_b_valid),
	.pBus_rdata                         (basesoc_naxriscv_r_payload_data),
	.pBus_rresp                         (basesoc_naxriscv_r_payload_resp),
	.pBus_rvalid                        (basesoc_naxriscv_r_valid),
	.pBus_wready                        (basesoc_naxriscv_w_ready),
	.peripheral_externalInterrupts_port (basesoc_naxriscv_interrupt),
	.socClk                             (sys_clk),

	// Outputs.
	.debug_ndmreset                     (basesoc_debug_ndmreset),
	.jtag_tdo                           (jtag_tdo),
	.pBus_araddr                        (basesoc_naxriscv_ar_payload_addr),
	.pBus_arprot                        (basesoc_naxriscv1),
	.pBus_arvalid                       (basesoc_naxriscv_ar_valid),
	.pBus_awaddr                        (basesoc_naxriscv_aw_payload_addr),
	.pBus_awprot                        (basesoc_naxriscv0),
	.pBus_awvalid                       (basesoc_naxriscv_aw_valid),
	.pBus_bready                        (basesoc_naxriscv_b_ready),
	.pBus_rready                        (basesoc_naxriscv_r_ready),
	.pBus_wdata                         (basesoc_naxriscv_w_payload_data),
	.pBus_wstrb                         (basesoc_naxriscv_w_payload_strb),
	.pBus_wvalid                        (basesoc_naxriscv_w_valid),
	.patcher_tracer_payload             (basesoc_naxriscv_tracer_payload),
	.patcher_tracer_valid               (basesoc_naxriscv_tracer_valid)
);

////------------------------------------------------------------------------------
//// Instance AL_MAP_SEQ of AL_MAP_SEQ Module.
////------------------------------------------------------------------------------
//AL_MAP_SEQ #(
//	// Parameters.
//	.DFFMODE ("FF"),
//	.REGSET  ("SET"),
//	.SRMODE  ("ASYNC"),
//	.SRMUX   ("SR")
//) AL_MAP_SEQ (
//	// Inputs.
//	.ce  (1'd1),
//	.clk (sys_clk),
//	.d   (1'd0),
//	.sr  (((~user_btn0) | crg_rst0)),

//	// Outputs.
//	.q   (rst1)
//);

////------------------------------------------------------------------------------
//// Instance AL_MAP_SEQ_1 of AL_MAP_SEQ Module.
////------------------------------------------------------------------------------
//AL_MAP_SEQ #(
//	// Parameters.
//	.DFFMODE ("FF"),
//	.REGSET  ("SET"),
//	.SRMODE  ("ASYNC"),
//	.SRMUX   ("SR")
//) AL_MAP_SEQ_1 (
//	// Inputs.
//	.ce  (1'd1),
//	.clk (sys_clk),
//	.d   (rst1),
//	.sr  (((~user_btn0) | crg_rst0)),

//	// Outputs.
//	.q   (sys_rst)
//);
reg [1:0]reset_ff;
wire reset_cond;
assign reset_cond=(((~sys_rstn) | crg_rst0));
always@(posedge sys_clk or posedge reset_cond)
if(reset_cond)
	reset_ff<=2'b11;
else
	reset_ff<={reset_ff[0],1'b0};
assign sys_rst=reset_ff[1];
endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-03-25 12:00:20.
//------------------------------------------------------------------------------
